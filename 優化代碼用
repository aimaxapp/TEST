using System;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System.Threading;
using Google.Apis.Sheets.v4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Util.Store;
using Google.Apis.Sheets.v4.Data;
using System.Text;
using System.Diagnostics;
using System.Net;
using System.Data;
using System.Management;
using Microsoft.Win32;
using Color = System.Drawing.Color;
using NAudio.Wave;
using System.Reflection;
using Newtonsoft.Json.Linq;
using SeleniumUndetectedChromeDriver;
using MailKit.Net.Imap;
using MailKit;
using MailKit.Search;

using OpenQA.Selenium.Interactions;
using System.Xml;
using System.Collections.ObjectModel;
using System.Runtime.Serialization.Formatters.Binary;
using System.ComponentModel;
using OpenQA.Selenium.Support.UI;
using Uber保存已登入帳號;
using System.Security.Cryptography;
using System.Security.Policy;
using Gma.System.MouseKeyHook;
using HtmlAgilityPack;
//using HtmlAgilityPack;
//using PuppeteerSharp;

namespace 外送自動註冊
{
    public partial class Form1 : Form
    {
        private Form4 form4;
        private Form3 form3;
        public Form1()
        {
            InitializeComponent();
            form4 = new Form4();
            form3 = new Form3();
            dataGridView2.MouseWheel += DataGridView2_MouseWheel;
        }
        private void DataGridView2_MouseWheel(object sender, MouseEventArgs e) //新增滑鼠滾動功能，禁用datagridview預設的滾動條
        {
            DataGridView dgv = sender as DataGridView;
            if (dgv != null)
            {
                int currentIndex = dgv.FirstDisplayedScrollingRowIndex;
                int scrollLines = SystemInformation.MouseWheelScrollLines;

                if (e.Delta > 0)
                {
                    currentIndex -= scrollLines;
                }
                else
                {
                    currentIndex += scrollLines;
                }

                if (currentIndex < 0)
                {
                    currentIndex = 0;
                }
                else if (currentIndex >= dgv.RowCount)
                {
                    currentIndex = dgv.RowCount - 1;
                }

                if (dgv.RowCount > 0)
                {
                    dgv.FirstDisplayedScrollingRowIndex = currentIndex;
                }
            }
        }
        [DllImport("Shlwapi.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public extern static bool PathFileExists(string path);
        private bool isScrollBarVisible = false;
        private void Timer_Tick(object sender, EventArgs e)
        {
            bool hasVerticalScrollBar = dataGridView2.Controls.OfType<VScrollBar>().Any();
            if (hasVerticalScrollBar != isScrollBarVisible)
            {
                isScrollBarVisible = hasVerticalScrollBar;
                if (isScrollBarVisible)
                {
                    // 禁用資料更新代碼
                }
                else
                {
                    // 啟用資料更新代碼
                }
            }
        }
        public static bool is_Chrome() //判斷是否有安裝google chrome瀏覽器
        {
            try
            {
                string app = "chrome.exe";
                RegistryKey regKey = Registry.LocalMachine;
                RegistryKey regSubKey = regKey.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\" + app, false);
                string strKey = string.Empty;
                object objResult = regSubKey.GetValue(strKey);
                RegistryValueKind regValueKind = regSubKey.GetValueKind(strKey);
                return true;

            }
            catch
            {
                MessageBox.Show("請檢查是否安裝Google瀏覽器！請重新下載安裝Google瀏覽器，不要使用免安裝攜帶版本的", "提示");
                return false;
            }
        }
        private async void timer1_Tick(object sender, EventArgs e)
        {
            timer1.Stop(); // Stop the timer to avoid overlapping ticks
            await 執行緒定時循環檢測();
            timer1.Start(); // Restart the timer after the method has finished
        }
        private async void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                is_Chrome();

                Form.CheckForIllegalCrossThreadCalls = false;
                UpdateDataGridView(() => dataGridView2.ClearSelection());

                string filePath = "UserSettings.xml";
                if (File.Exists(filePath))
                {
                    List<ComboBox> comboBoxesToSave = new List<ComboBox> { 預設暱稱Combobox, 預設地址Combobox, 預設備註Combobox, 預設網址Combobox, 預設店家網址Combobox };
                    List<CheckBox> checkBoxesToSave = new List<CheckBox> { 改成後台運行, 修改預設備註Checkbox, 修改成放門口Checkbox, 新增現金付款Checkbox, 輸入優惠碼Checkbox, 最上層Checkbox, form4.使用自定義Gmail信箱Checkbox, 獲取推薦碼Checkbox, 新增信用卡Checkbox, 加入購物車Checkbox, 自動下單Checkbox, 秘密用Checkbox, 隨機地址checkbox };
                    List<RichTextBox> richTextBoxList = new List<RichTextBox>
                   {
   form4.form4信箱輸入框richtextbox,
   form4.form4信箱註冊次數顯示richtextbox,
    加入購物車richTextBox,
    推薦碼輸入框richTextBox
};
                    讀取用戶設置從XML(comboBoxesToSave, checkBoxesToSave, richTextBoxList, dataGridView2, filePath);
                }

                DirectoryInfo root = new DirectoryInfo(Path.Combine(Environment.CurrentDirectory));
                foreach (var i in root.GetDirectories())//取得所有路徑資料夾，並只顯示UberCookie資料夾
                {
                    if (i.FullName.Contains("UberEats已經登入帳號的Cookie"))
                    {
                        await UpdateDataGridViewAsync(i.FullName, i.Name);
                    }
                }

                if (最上層Checkbox.Checked)
                {
                    this.TopMost = true; // 程式最上層
                }
                else
                {
                    this.TopMost = false; // 取消最上層
                }
                string[] 確認功能是否開通使用01開關 = Form2.確認功能是否開通使用01開關.ToString().Split(',');
                //string[] 確認功能是否開通使用01開關 = "1,1,1,1".ToString().Split(',');
                if (確認功能是否開通使用01開關 != null)
                {
                    if (確認功能是否開通使用01開關[1] == "1")
                    {
                        秘密用Checkbox.Enabled = true;
                    }
                    else
                    {
                        秘密用Checkbox.Enabled = false;
                        秘密用Checkbox.Checked = false;
                    }


                    if (確認功能是否開通使用01開關[2] == "1")
                    {
                        防偵測破解Checkbox.Checked = true;
                    }
                    else
                    {
                        防偵測破解Checkbox.Enabled = false;
                        防偵測破解Checkbox.Checked = false;
                    }

                    if (確認功能是否開通使用01開關[3] == "1")
                    {
                        同步器Button.Enabled = true;
                        Subscribe();
                    }
                    else
                    {
                        同步器Button.Enabled = false;
                    }
                }
                timer1.Start();
            }
            catch
            { }
        }
        private IKeyboardMouseEvents m_GlobalHook;
        private void Subscribe() //同步器熱鍵
        {
            m_GlobalHook = Hook.GlobalEvents();
            m_GlobalHook.KeyUp += GlobalHookKeyUp;
        }
        private void GlobalHookKeyUp(object sender, KeyEventArgs e)
        {
            if (e.Control && e.Alt && e.KeyCode == System.Windows.Forms.Keys.Z)
            {
                同步器Button_Click(sender, e);
            }
        }

        private void Unsubscribe()
        {
            if (m_GlobalHook != null)
            {
                m_GlobalHook.KeyUp -= GlobalHookKeyUp;
                m_GlobalHook.Dispose();
                m_GlobalHook = null;
            }
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            base.OnFormClosing(e);
            Unsubscribe();
        }
        private async void 同步器Button_Click(object sender, EventArgs e)
        {
            try
            {
                var commandLines = await Task.Run(() =>
                {
                    var query = new SelectQuery("SELECT CommandLine FROM Win32_Process WHERE Name='chrome.exe' and CommandLine like '%remote-debugging-port=%' and not CommandLine like '%type=renderer%'");
                    var searcher = new ManagementObjectSearcher(query);
                    return searcher.Get().Cast<ManagementObject>().Select(p => p["CommandLine"].ToString()).ToList();
                }).ConfigureAwait(false);

                foreach (var item in commandLines)
                {
                    var userDataDirMatch = Regex.Match(item, @"--user-data-dir=(.+?)(\s|$)");
                    if (userDataDirMatch.Success)
                    {
                        var userDataDir = userDataDirMatch.Groups[1].Value;

                        if (保存瀏覽器物件繼續調用字典.ContainsKey(userDataDir))
                        {
                            await ProcessChromeInstance(userDataDir).ConfigureAwait(false);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

        private async Task ProcessChromeInstance(string userDataDir)
        {
            var ChromeGoGo = 保存瀏覽器物件繼續調用字典[userDataDir].Item2;
            List<string> checkoutHandles = new List<string>();

            foreach (string windowHandle in ChromeGoGo.WindowHandles)
            {
                ChromeGoGo.SwitchTo().Window(windowHandle);
                if (ChromeGoGo.Title.Contains("結帳"))
                {
                    foreach (DataGridViewRow row in dataGridView2.Rows.Cast<DataGridViewRow>())
                    {
                        if (row.Cells["餅乾路徑"].Value.ToString().Contains(userDataDir))
                        {
                            try
                            {
                                string content = ChromeGoGo.FindElement(By.XPath("//*[@id=\"main-content\"]/div/div[3]/div[2]/div[1]/div[1]/a[2]")).Text;
                                if (string.IsNullOrEmpty(content))
                                {
                                    continue;
                                }

                                lock (row.Cells["備註"])
                                {
                                    if (row.Cells["備註"].Value == null)
                                    {
                                        row.Cells["備註"].Value = content;
                                    }
                                    else
                                    {
                                        row.Cells["備註"].Value += "\n" + content;  // Add content to existing '備註' and separate with newline
                                    }
                                }
                                checkoutHandles.Add(windowHandle);
                            }
                            catch
                            {
                                // Log or handle the exception
                            }
                            break;
                        }
                    }
                }
            }

            foreach (string windowHandle in checkoutHandles)
            {
                ChromeGoGo.SwitchTo().Window(windowHandle);
                try
                {
                    ChromeGoGo.FindElement(By.XPath("//*[@id=\"main-content\"]/div/div[3]/div[2]/div[2]/div/div[1]/div")).Click();
                }
                catch { }
            }

            RemoveDuplicateAndEmptyRemarks(); //移除重複
        }
        private void RemoveDuplicateAndEmptyRemarks()//移除重複
        {
            if (dataGridView2.InvokeRequired)
            {
                dataGridView2.Invoke(new Action(RemoveDuplicateAndEmptyRemarks));
                return;
            }

            for (int i = 0; i < dataGridView2.Rows.Count; i++)
            {
                var row = dataGridView2.Rows[i];
                var cellValue = row.Cells["備註"].Value;

                if (cellValue == null)
                {
                    continue;
                }

                string remarks = cellValue.ToString();

                // Split remarks into lines.
                var remarksLines = remarks.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

                // Remove duplicate lines while maintaining order.
                var uniqueRemarksLines = remarksLines.Distinct().ToList();

                // Combine unique lines back into one string, separated by newline.
                var uniqueRemarks = string.Join("\n", uniqueRemarksLines);

                // Update the cell value.
                row.Cells["備註"].Value = uniqueRemarks;
            }
        }

        private async void Form1_Shown(object sender, EventArgs e)
        {
            bool dataLoaded = false;
            string originalTitle = this.Text;

            while (!dataLoaded)
            {
                this.Text = originalTitle + " - 正在跑防偵測資料庫數據，請稍後...待完成後才可以自動創建";

                try
                {
                    await Task.Run(() =>
                    {
                        sheetsService = InitializeSheetsService();
                        UserAgent全域List陣列 = GetSheetData(sheetsService, "1sxwfgSiX9IV4W_Y0l67f09kQfy8pnD7Vm6LY5EiBa30", 65000); //從Google Sheet取得所有UserAgent
                    });

                    if (UserAgent全域List陣列 != null && UserAgent全域List陣列.Count > 0)
                    {
                        dataLoaded = true;
                    }
                    else
                    {
                        await Task.Delay(1000); // 等待1秒钟
                    }
                }
                catch (Exception ex)
                {
                    // 網絡連接中斷或其他錯誤，等待一段時間後重試
                    await Task.Delay(1000); // 等待1秒钟
                }
            }

            this.Text = originalTitle;
        }
        public bool IsInternetAvailable()
        {
            try
            {
                using (var client = new WebClient())
                using (client.OpenRead("http://google.com/generate_204"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        SheetsService sheetsService = null;
        IList<IList<object>> UserAgent全域List陣列 = null;

        private HashSet<string> existingCookies = new HashSet<string>();
        private HashSet<string> newCookies = new HashSet<string>();
        private readonly object dataGridViewLock = new object();
        private void UpdateDataGridView(Action action)
        {
            lock (dataGridViewLock)
            {
                action();
            }
        }
        private async Task UpdateDataGridViewAsync(string iFullName, string iName)
        {
            if (dataGridView2.Rows.Count <= 0)
            {
                dataGridView2.Rows.Add(1);
            }
            for (int k = 0; k < dataGridView2.Rows.Count; k++)
            {
                if (dataGridView2.Rows[k].Cells["餅乾路徑"].Value != null && dataGridView2.Rows[k].Cells["餅乾路徑"].Value.ToString() == iFullName)
                {
                    break;
                }
                if (k == dataGridView2.Rows.Count - 1)
                {
                    if (dataGridView2.Rows[0].Cells["路徑縮名"].Value != null)
                    {
                        dataGridView2.Rows.Add(1);
                    }
                    await Task.Delay(50);
                    UpdateDataGridView(() => dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells["路徑縮名"].Value = iName);
                    UpdateDataGridView(() => dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells["餅乾路徑"].Value = iFullName);
                }
            }
        }
        private async Task 執行緒定時循環檢測()
        {
            try
            {
                var commandLines = await Task.Run(() =>
                {
                    var query = new SelectQuery("SELECT CommandLine FROM Win32_Process WHERE Name='chrome.exe' and CommandLine like '%remote-debugging-port=%' and not CommandLine like '%type=renderer%'");
                    var searcher = new ManagementObjectSearcher(query);
                    return searcher.Get().Cast<ManagementObject>().Select(p => p["CommandLine"].ToString()).ToList();
                });

                foreach (var item in commandLines)
                {
                    var userDataDirMatch = Regex.Match(item, @"--user-data-dir=(.+?)(\s|$)");
                    var portMatch = Regex.Match(item, @"--remote-debugging-port=(\d+)");
                    if (userDataDirMatch.Success)
                    {
                        var userDataDir = userDataDirMatch.Groups[1].Value;
                        var port = int.Parse(portMatch.Groups[1].Value);
                        newCookies.Add(userDataDir);

                        UpdateDataGridView(() =>
                        {
                            dataGridView2.Rows.Cast<DataGridViewRow>().Where(row => row.Cells["餅乾路徑"].Value?.ToString() == userDataDir).ToList().ForEach(row =>
                            {
                                row.Cells["Port"].Value = port.ToString();
                                row.DefaultCellStyle.BackColor = System.Drawing.Color.Green;
                            });
                        });
                    }
                }

                existingCookies.ExceptWith(newCookies);
                newCookies.ExceptWith(existingCookies);

                foreach (var i in existingCookies)
                {
                    UpdateDataGridView(() =>
                    {
                        dataGridView2.Rows.Cast<DataGridViewRow>().Where(row => row.Cells["餅乾路徑"].Value?.ToString() == i).ToList().ForEach(row =>
                        {
                            row.Cells["Port"].Value = "";
                            row.DefaultCellStyle.BackColor = System.Drawing.Color.White;
                        });
                    });
                }
                existingCookies.UnionWith(newCookies);
                newCookies.Clear();

                // 新增檢查條件以便將顏色設回白色
                UpdateDataGridView(() =>
                {
                    dataGridView2.Rows.Cast<DataGridViewRow>().Where(row => string.IsNullOrEmpty(row.Cells["Port"].Value?.ToString()) || row.Cells["Port"].Value?.ToString() == "").ToList().ForEach(row =>
                    {
                        row.DefaultCellStyle.BackColor = System.Drawing.Color.White;
                    });
                });
            }
            catch (Exception)
            {
            }
        }

        private void 創建開啟一個新瀏覽器_Click(object sender, EventArgs e)
        {
            this.BeginInvoke((Action)delegate ()
            {
                創建開啟一個新瀏覽器.Enabled = false;
                創建開啟一個新瀏覽器並且自動註冊.Enabled = false;
                ThreadPool.QueueUserWorkItem(new WaitCallback(WorkerThread), "null");
            });
        }
        private async void 創建開啟一個新瀏覽器並且自動註冊_Click(object sender, EventArgs e)
        {
            int.TryParse(numericUpDown1.Text, out int numberOfBrowsers);
            int maxConcurrentBrowsers = 4;
            SemaphoreSlim semaphore = new SemaphoreSlim(maxConcurrentBrowsers);

            for (int i = 0; i < numberOfBrowsers; i++)
            {
                await semaphore.WaitAsync();

                BackgroundWorker worker = new BackgroundWorker();
                worker.WorkerReportsProgress = true;
                worker.WorkerSupportsCancellation = true;
                worker.DoWork += (s, ev) =>
                {
                    WorkerThread("自動註冊");
                    System.Threading.Thread.Sleep(3000); // 等待3秒
                    semaphore.Release();
                };

                worker.RunWorkerAsync();
                await Task.Delay(TimeSpan.FromSeconds(3000)); // 等待3秒，以便逐個啟動 WorkerThread
            }
        }

        Dictionary<string, (string, UndetectedChromeDriver, SheetsService, string)> 保存瀏覽器物件繼續調用字典 = new Dictionary<string, (string, UndetectedChromeDriver, SheetsService, string)>();
        private object _lockObject1 = new object();
        private object _lockObject2 = new object();
        private object _lockObject3 = new object();
        // 建立一個 dictionary 來保存 TaskCompletionSource 以及相關的路徑
        public async void WorkerThread(object 瀏覽器Cookie路徑)//每按下一次Button就開一個，執行緒多開分別控制每個Selenium瀏覽器
        {
            try
            {
                ChromeOptions options = new ChromeOptions();
                string 選擇哪個路徑 = null;
                int 路徑添加個數數量 = 0;
                string 當前Cookie路徑資料夾 = Path.Combine(Environment.CurrentDirectory) + "\\UberEats已經登入帳號的Cookie";
                string 當前Cookie路徑資料夾1 = 當前Cookie路徑資料夾;
                if (瀏覽器Cookie路徑.ToString() == "null" || 瀏覽器Cookie路徑.ToString() == "自動註冊")//如果創建一個新的瀏覽器的話
                {
                    while (!是否中斷所有while)
                    {
                        if (System.IO.Directory.Exists(當前Cookie路徑資料夾1))
                        {
                            當前Cookie路徑資料夾1 = 當前Cookie路徑資料夾;
                            當前Cookie路徑資料夾1 += 路徑添加個數數量;
                            路徑添加個數數量++;
                        }
                        else
                        {
                            dataGridView2.Rows.Add();
                            dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells["路徑縮名"].Value = 當前Cookie路徑資料夾1.Split(Path.DirectorySeparatorChar)[當前Cookie路徑資料夾1.Split(Path.DirectorySeparatorChar).Length - 1];
                            dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells["餅乾路徑"].Value = 當前Cookie路徑資料夾1;
                            選擇哪個路徑 = 當前Cookie路徑資料夾1;
                            break;
                        }
                    }
                }
                else//如果直接點啟動現有瀏覽器的話
                {
                    選擇哪個路徑 = 瀏覽器Cookie路徑.ToString();
                }

                Random UserAgent亂數 = new Random();//亂數種子
                if (!防偵測破解Checkbox.Checked) //如果不是打勾的狀態就用另外一種沒有防偵測能力的google sheet
                {
                    lock (_lockObject1)
                    {
                        sheetsService = InitializeSheetsService();
                        UserAgent全域List陣列 = GetSheetData(sheetsService, "1ssSyxBkzzXgOalWHQYFfRIxTTkT7uRvP1SJRHiFpNRE", 10000);//從Google Sheet取得所有UserAgent
                    }
                }
                while (true)
                {
                    if (!防偵測破解Checkbox.Checked)
                    {
                        break;
                    }
                    if (File.Exists(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt"))
                    {
                        break; // 如果文件存在，則退出迴圈
                    }
                    if (UserAgent全域List陣列 != null)
                    {
                        break;
                    }
                    Thread.Sleep(100);
                }
                var 使用哪個UserAgent保存 = "";
                if (!File.Exists(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt"))
                {
                    if (!Directory.Exists(選擇哪個路徑))//創建資料夾
                    {
                        Directory.CreateDirectory(選擇哪個路徑);
                    }
                    if (!File.Exists(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt"))//創建txt
                    {
                        File.Create(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt").Close();
                    }

                    string 隨機電腦系統;
                    List<IList<object>> 匹配的UserAgents;
                    do
                    {
                        隨機電腦系統 = 隨機Useragent電腦系統();  //您已經寫好的方法
                        匹配的UserAgents = UserAgent全域List陣列.Where(ua => ua[0].ToString().Contains(隨機電腦系統)).ToList();
                    }
                    while (匹配的UserAgents.Count == 0);
                    //Random 隨機 = new Random();
                    //int 隨機Index = 隨機.Next(匹配的UserAgents.Count);
                    //使用哪個UserAgent保存 = 匹配的UserAgents[隨機Index][0].ToString();
                    Random 隨機 = new Random();
                    int 隨機Index = 隨機.Next(UserAgent全域List陣列.Count);
                    使用哪個UserAgent保存 = UserAgent全域List陣列[隨機Index][0].ToString();

                    StreamWriter sw = new StreamWriter(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt", false, Encoding.Default);//寫入隨機useragent
                    sw.WriteLine(使用哪個UserAgent保存);
                    sw.Close();

                    //options.AddArgument($"--user-agent={"Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0"}");//隨機修改UserAgent
                    //Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36
                    //options.AddArgument($"--user-agent={"Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0"}");//隨機修改UserAgent
                    //options.AddArgument($"--user-agent={"Mozilla/5.0 (X11; CrOS x86_64 14541.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"}");//隨機修改UserAgent
                    //options.AddArgument($"--user-agent={"Mozilla/5.0 (X11; CrOS x86_64 14541.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36  uacq"}");//隨機修改UserAgent
                    options.AddArgument($"--user-agent={使用哪個UserAgent保存}");//隨機修改UserAgent
                    //DeleteSheetData(sheetsService, "1sxwfgSiX9IV4W_Y0l67f09kQfy8pnD7Vm6LY5EiBa30", UserAgent全域List陣列, 使用哪個UserAgent保存);
                }
                else
                {
                    using (StreamReader reader = new StreamReader(選擇哪個路徑 + "\\UberEats保存已使用的UserAgent.txt"))//找到已用過的useragent就固定使用，讀取txt內的useragent
                    {
                        使用哪個UserAgent保存 = reader.ReadToEnd();
                        options.AddArgument($"--user-agent={使用哪個UserAgent保存}");
                    }
                }

                lock (_lockObject1)
                {
                    創建開啟一個新瀏覽器.Enabled = true;
                    創建開啟一個新瀏覽器並且自動註冊.Enabled = true;
                    //int Port = 9222;
                    //while (!是否中斷所有while)
                    //{
                    //    var query = new SelectQuery($"SELECT CommandLine FROM Win32_Process WHERE Name='chrome.exe' and CommandLine like '%remote-debugging-port={Port}%'");
                    //    var searcher = new ManagementObjectSearcher(query);
                    //    if (searcher.Get().Count == 0)
                    //    {
                    //        break;
                    //    }
                    //    Port++;
                    //}
                    //options.AddArgument($"--remote-debugging-port={Port}");//讓程式關閉後重新啟動可以繼續調用

                    自動生成Json和Js檔案Google擴充路徑();
                    string extensionFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ChromedriverFinger\";
                    options.AddArguments("--load-extension=" + extensionFolderPath);
                }
                options.AddAdditionalOption("webrtc.ip_handling_policy", "disable_non_proxied_udp");
                options.AddAdditionalOption("webrtc.multiple_routes_enabled", false);
                options.AddAdditionalOption("webrtc.nonproxied_udp_enabled", false);

                //options.AddAdditionalOption("experimentalOption", true);//定位
                //options.AddAdditionalOption("geolocation", true);

                //options.AddArguments(
                //"--lang=tw",
                //"--disable-gpu",
                    //"--ignore-gpu-blacklist",
                //"--autoplay-policy=user-gesture-required",
                //"--disable-background-networking",
                //"--disable-background-timer-throttling",
                //"--disable-backgrounding-occluded-windows",
                //"--disable-breakpad",
                //"--disable-client-side-phishing-detection",
                //"--disable-component-update",
                //"--disable-dev-shm-usage",
                //"--disable-domain-reliability",
                //"--disable-features=AudioServiceOutOfProcess",
                //"--disable-hang-monitor",
                //"--disable-ipc-flooding-protection",
                //"--disable-desktop-notifications",  //;//禁用桌面通知，在Windows中桌面通知默認是啟用的。
                // "--mute-audio",
                //"--no-first-run",
                //"--disable-speech-api"
                //"--ignore-certificate-errors",
                //"--no-default-browser-check",
                //"--no-pings",
                //"--disable-notifications",
                //"--disable-offer-store-unmasked-wallet-cards",
                //"--disable-popup-blocking",
                //"--disable-print-preview",
                //"--disable-prompt-on-repost",
                //"--disable-renderer-backgrounding",
                //"--disable-setuid-sandbox",
                //"--disk-cache-size=33554432",
                //"--hide-scrollbars",
                //"--metrics-recording-only",
                //"--no-sandbox",
                //"--no-zygote",
                //"--password-store=basic",
                //"--use-gl=swiftshader",
                //"--use-mock-keychain",
                //"--single-process"
                //);

                //        if (瀏覽器Cookie路徑.ToString() == "自動註冊" && 改成後台運行.Checked)
                //        {
                //            options.AddArgument("--headless=new");
                //        }

                var ChromeGoGo = UndetectedChromeDriver.Create(
                driverExecutablePath: new ChromeDriverInstaller().Auto().Result,
                hideCommandPromptWindow: true,
                options: options,
userDataDir: 選擇哪個路徑
                );
                ChromeGoGo.Manage().Window.Size = new System.Drawing.Size(1080, 880);
                var screen = Screen.PrimaryScreen;
                int rightEdge = screen.WorkingArea.Right;
                int topEdge = screen.WorkingArea.Top;

                ChromeGoGo.Manage().Window.Position = new System.Drawing.Point(rightEdge - 1080, topEdge);

                lock (_lockObject2)
                {
                    foreach (DataGridViewRow row in dataGridView2.Rows)
                    {
                        if (row.Cells["餅乾路徑"].Value.ToString() == 選擇哪個路徑)
                        {
                            row.DefaultCellStyle.BackColor = System.Drawing.Color.Green;
                        }
                    }
                }
                lock (_lockObject3)
                {
                    保存瀏覽器物件繼續調用字典[選擇哪個路徑] = (選擇哪個路徑, ChromeGoGo, sheetsService, 使用哪個UserAgent保存);
                }
                //lock (_lockObject4)
                //{
                if (瀏覽器Cookie路徑.ToString() == "自動註冊")
                {
                    ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                    foreach (DataGridViewRow row in dataGridView2.Rows)
                    {
                        if (row.Cells["餅乾路徑"].Value.ToString() == 選擇哪個路徑)
                        {
                            await Task.Delay(1000);

                            if (dataGridView2.InvokeRequired)
                            {
                                dataGridView2.Invoke(new MethodInvoker(async () => await ExecuteDataGridViewActionsAsync(dataGridView2, new DataGridViewCellEventArgs(row.Cells["註冊"].ColumnIndex, row.Index))));
                            }
                            else
                            {
                                await ExecuteDataGridViewActionsAsync(dataGridView2, new DataGridViewCellEventArgs(row.Cells["註冊"].ColumnIndex, row.Index));
                            }

                            break;
                        }
                    }
                }
                else
                {
                    ChromeGoGo.Navigate().GoToUrl(預設網址Combobox.Text);
                }
                //}
            }
            catch (Exception)
            {
            }
        }
        private async Task UpdateDataGridViewAsync(DataGridView dataGridView, DataGridViewCellEventArgs e, string columnName, string value)
        {
            if (dataGridView.InvokeRequired)
            {
                await Task.Run(() => UpdateDataGridView(() => dataGridView.Rows[e.RowIndex].Cells[columnName].Value = value));
            }
            else
            {
                dataGridView.Rows[e.RowIndex].Cells[columnName].Value = value;
            }
        }
        private async Task ExecuteDataGridViewActionsAsync(DataGridView dataGridView, DataGridViewCellEventArgs e)
        {
            await UpdateDataGridViewAsync(dataGridView, e, "註冊", "註冊中");
            await Task.Run(() => dataGridView2_CellContentClick(dataGridView, e)).ConfigureAwait(false);
            await UpdateDataGridViewAsync(dataGridView, e, "註冊", "註冊中");
        }

        bool 是否中斷所有while = false;
        private async void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            重跑async:
            try
            {
                await Task.Run(async () =>
                    {
                        if (dataGridView2.Columns[e.ColumnIndex].Name == "啟動")
                        {
                            WorkerThread(dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value);
                        }
                        else if (dataGridView2.Columns[e.ColumnIndex].Name == "註冊" && dataGridView2.Rows[e.RowIndex].DefaultCellStyle.BackColor == System.Drawing.Color.Green)
                        {
                            UndetectedChromeDriver ChromeGoGo = 保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item2;
                            Random random = new Random();
                            重頭來過不重開瀏覽器了:
                            string 台灣隨機門號 = null;
                            try
                            {
                                var 所有台灣空門號大全List陣列 = GetSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1kHppk2jAhzZj7a_6RxSyEBbhbWKii2n5Q1D65fgSk8A", 1000);//從Google Sheet取得所有UserAgent
                                台灣隨機門號 = 所有台灣空門號大全List陣列[random.Next(所有台灣空門號大全List陣列.Count - 1)][0].ToString();
                                //Invoke((MethodInvoker)delegate
                                //{
                                dataGridView2.Rows[e.RowIndex].Cells["註冊門號"].Value = 台灣隨機門號;
                                //});
                                DeleteSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1kHppk2jAhzZj7a_6RxSyEBbhbWKii2n5Q1D65fgSk8A", 所有台灣空門號大全List陣列, 台灣隨機門號);
                            }
                            catch
                            {
                            }

                            string 姓氏 = null;
                            string 名字 = null;
                            try
                            {
                                var 所有姓氏姓名大全List陣列 = GetSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1O2VMb6kRuhhreKkaRg2uXOZmsb5e3FvVG9JAUzG-K88", 1000);//從Google Sheet取得所有UserAgent
                                string 完整姓氏姓名 = 所有姓氏姓名大全List陣列[random.Next(所有姓氏姓名大全List陣列.Count - 1)][0].ToString();
                                姓氏 = 完整姓氏姓名.Substring(0, 1); // 姓氏是第一個字
                                名字 = 完整姓氏姓名.Substring(1); // 名字是第二個字開始的所有字元
                                                          //Invoke((MethodInvoker)delegate
                                                          //{
                                dataGridView2.Rows[e.RowIndex].Cells["註冊暱稱"].Value = 完整姓氏姓名;
                                //});
                                DeleteSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1O2VMb6kRuhhreKkaRg2uXOZmsb5e3FvVG9JAUzG-K88", 所有姓氏姓名大全List陣列, 完整姓氏姓名);
                            }
                            catch
                            {
                            }
                            try
                            {
                                //Invoke((MethodInvoker)delegate
                                //        {
                                string ip = new WebClient().DownloadString("https://ipinfo.io/ip").Trim();

                                WebClient client = new WebClient();
                                string json = client.DownloadString($"http://ip-api.com/json/{ip}?fields=country");
                                JObject jObject = JObject.Parse(json);

                                string country = jObject["country"].ToString();
                                dataGridView2.Rows[e.RowIndex].Cells["實體IP位置"].Value = ($"{ip}\n國家:{country}");
                                //});
                            }
                            catch { }

                            //重新刷帳號:
                            IList<IList<object>> UserAgent全域List陣列 = null;
                            Dictionary<string, string> 公共Gmail信箱帳號密碼字典 = new Dictionary<string, string>();
                            try
                            {
                                if (form4.使用自定義Gmail信箱Checkbox.Checked)
                                {
                                    string input = form4.form4信箱輸入框richtextbox.Text;
                                    string[] lines = input.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        string[] parts = line.Trim().Split(' ');
                                        if (parts.Length == 2)
                                        {
                                            string email = parts[0];
                                            string password = parts[1];

                                            if (email.EndsWith("@gmail.com"))
                                            {
                                                email = email.Replace("@gmail.com", "");
                                            }

                                            公共Gmail信箱帳號密碼字典.Add(email, password);
                                        }
                                        else if (parts.Length == 1 && parts[0].Contains("@"))
                                        {
                                            string email = parts[0];
                                            公共Gmail信箱帳號密碼字典.Add(email, null);
                                        }
                                    }
                                }
                                else
                                {
                                    UserAgent全域List陣列 = GetSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1eFCMZ9LZtvdAN2XTpG9AzBd9gq1GKa8RdVa1wasgeV0", 1000);//從Google Sheet取得所有UserAgent
                                    if (UserAgent全域List陣列 == null)
                                    {
                                        MessageBox.Show("暫無可用公共信箱，請使用自己的信箱");
                                        return;
                                    }
                                    foreach (var j in UserAgent全域List陣列)
                                    {
                                        公共Gmail信箱帳號密碼字典.Add(j[0].ToString(), j[1].ToString());
                                    }
                                }
                            }
                            catch
                            {
                            }

                            var 隨機生成公共Gmail帳號密碼 = 公共Gmail信箱帳號密碼字典.Keys.ToArray()[random.Next(公共Gmail信箱帳號密碼字典.Count)];
                            string username = 隨機生成公共Gmail帳號密碼;
                            string 完整信箱 = null;

                            try
                            {
                                if (username.Contains("@"))
                                {
                                    完整信箱 = username;
                                }
                                else
                                {
                                    var allEmailCombinations = new List<string>();
                                    for (int maxDots = 1; maxDots <= 3; maxDots++)
                                    {
                                        var emailCombinations = GenerateAllEmailCombinationsWithDots(username, maxDots);
                                        allEmailCombinations.AddRange(emailCombinations);
                                    }

                                    var shuffledEmailCombinations = allEmailCombinations.OrderBy(x => random.Next()).ToList();
                                    shuffledEmailCombinations = shuffledEmailCombinations.OrderBy(x => random.Next()).ToList();

                                    int randomIndex = random.Next(shuffledEmailCombinations.Count);
                                    完整信箱 = shuffledEmailCombinations[randomIndex];
                                }
                            }
                            catch
                            {
                            }


                            try
                            {
                                DateTime now = DateTime.Now;
                                //Invoke((MethodInvoker)delegate
                                //{
                                    dataGridView2.Rows[e.RowIndex].Cells["創建時間"].Value = now.ToString("yyyy-MM-dd HH:mm");
                                //});
                            }
                            catch { }
                            try
                            {
                                //Invoke((MethodInvoker)delegate
                                //{
                                    dataGridView2.Rows[e.RowIndex].Cells["註冊信箱"].Value = 完整信箱;
                                //});
                            }
                            catch { }
                            try
                            {
                                //Invoke((MethodInvoker)delegate
                                //{
                                    dataGridView2.Rows[e.RowIndex].Cells["註冊信箱應用密碼"].Value = 公共Gmail信箱帳號密碼字典[隨機生成公共Gmail帳號密碼];
                                //});
                            }
                            catch { }
                            Actions actions = new Actions(ChromeGoGo);
                            bool 判斷輸入優惠碼輸入完成 = false;
                            bool 判斷是否完成新增現金單 = false;
                            bool 判斷已經獲取完推薦碼 = false;
                            while (!是否中斷所有while)
                            {
                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/header/div/div/div/div/a[3]")).Count > 0)
                                    {
                                        IWebElement 註冊 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"wrapper\"]/header/div/div/div/div/a[3]"));
                                        註冊.Click();//註冊
                                    }
                                }
                                catch
                                { }
                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/header/div/div/div/div/a[2]")).Count > 0)
                                    {
                                        IWebElement 註冊 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"wrapper\"]/header/div/div/div/div/a[2]"));
                                        註冊.Click();//註冊
                                    }
                                }
                                catch
                                { }


                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/header/div/div/div/div/a[3]")).Count > 0) //useragent瀏覽器太老舊
                                    {
                                        UserAgent全域List陣列 = GetSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1ssSyxBkzzXgOalWHQYFfRIxTTkT7uRvP1SJRHiFpNRE", 1000);//從Google Sheet取得所有UserAgent
                                        DeleteSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1ssSyxBkzzXgOalWHQYFfRIxTTkT7uRvP1SJRHiFpNRE", UserAgent全域List陣列, 保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item4);
                                        ChromeGoGo.Quit();
                                        ChromeGoGo.Dispose();
                                        await Task.Delay(1500);
                                        Directory.Delete(dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString(), true);
                                        dataGridView2.Rows.RemoveAt(e.RowIndex);
                                        ThreadPool.QueueUserWorkItem(new WaitCallback(WorkerThread), "自動註冊");
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/div[4]/div[6]/button")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/div[4]/div[6]/button"));
                                        string buttonText = element.Text.Trim();

                                        if (buttonText == "使用電子郵件繼續")
                                        {
                                            actions.MoveToElement(element).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id='PHONE_NUMBER_or_EMAIL_ADDRESS']")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("//*[@id='PHONE_NUMBER_or_EMAIL_ADDRESS']")); //信箱輸入框
                                        string inputText = element.GetAttribute("value");
                                        if (string.IsNullOrEmpty(inputText))
                                        {
                                            element.SendKeys(完整信箱);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"PHONE_NUMBER_or_EMAIL_ADDRESS\"]")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("//*[@id=\"PHONE_NUMBER_or_EMAIL_ADDRESS\"]")); //信箱輸入框
                                        string inputText = element.GetAttribute("value");
                                        if (string.IsNullOrEmpty(inputText))
                                        {
                                            element.SendKeys(完整信箱);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"EMAIL_ADDRESS\"]")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("//*[@id=\"EMAIL_ADDRESS\"]")); //信箱輸入框
                                        string inputText = element.GetAttribute("value");
                                        if (string.IsNullOrEmpty(inputText))
                                        {
                                            element.SendKeys(完整信箱);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[1]/div[1]/div[2]/button/div")).Count > 0) //繼續按紐
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[1]/div[1]/div[2]/button/div")); //信箱輸入框
                                        actions.MoveToElement(element).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/button/div")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/button/div")); //信箱完繼續按鈕
                                        actions.MoveToElement(element).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"EMAIL_OTP_CODE-0\"]")).Count > 0)
                                    {
                                        using (var client = new ImapClient())
                                        {
                                            ServicePointManager.ServerCertificateValidationCallback = (s, certificate, chain, sslPolicyErrors) => true; //忽略憑證
                                            client.Connect("imap.gmail.com", 993, true);
                                            client.Authenticate(隨機生成公共Gmail帳號密碼, 公共Gmail信箱帳號密碼字典[隨機生成公共Gmail帳號密碼]);
                                            client.Inbox.Open(FolderAccess.ReadWrite);

                                            // 僅搜索來自Uber並發送給指定收件人的郵件
                                            var searchQuery = SearchQuery.FromContains("admin@uber.com").And(SearchQuery.ToContains(完整信箱));
                                            var messages = client.Inbox.Search(searchQuery);
                                            int messageCount = messages.Count();

                                            // 如果沒有找到符合的郵件，則檢查垃圾桶
                                            if (messageCount == 0)
                                            {
                                                var trashFolder = client.GetFolder("[Gmail]/垃圾桶");
                                                trashFolder.Open(FolderAccess.ReadWrite);
                                                messages = trashFolder.Search(searchQuery);
                                                messageCount = messages.Count();
                                            }

                                            // 將郵件按收到日期排序，以便最新的郵件排在前面
                                            messages = messages.OrderByDescending(m => client.Inbox.GetMessage(m).Date).ToList();

                                            foreach (var message in messages)
                                            {
                                                var email = client.Inbox.GetMessage(message);
                                                IWebElement element = ChromeGoGo.FindElement(By.XPath("//*[@id=\"EMAIL_OTP_CODE-0\"]")); //信箱完繼續按鈕
                                                string code = Regex.Match(email.HtmlBody, @"(?<=<p>)\d{4}(?=</p>)").Value;
                                                element.SendKeys(code);
                                            }

                                            client.Disconnect(true);
                                        }
                                    }
                                }
                                catch /*(Exception j)*/
                                {
                                    //if (!j.Message.Contains("window already closed") && j.Message.Contains("not found"))
                                    //{
                                    //    MessageBox.Show(j.Message + " 這信箱可能爆了，建議你重創一個指紋瀏覽器並且換一個信箱");
                                    //}
                                }


                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"EMAIL_OTP_CODE-error\"]")).Count > 0)
                                    {
                                        var emailErrorElements = ChromeGoGo.FindElements(By.XPath("//*[@id=\"EMAIL_OTP_CODE-error\"]"));
                                        string errorMessage = emailErrorElements[0].Text;
                                        if (!string.IsNullOrEmpty(errorMessage) && errorMessage.Contains("電子信箱密碼錯誤"))
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                            goto 重頭來過不重開瀏覽器了;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[1]/div[2]/div/div/bdi/div[2]/div[2]/input")).Count > 0)
                                    {
                                        IWebElement 手機號碼輸入框 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[1]/div[2]/div/div/bdi/div[2]/div[2]/input"));
                                        string inputText = 手機號碼輸入框.GetAttribute("value");

                                        if (string.IsNullOrEmpty(inputText))
                                        {
                                            手機號碼輸入框.SendKeys(台灣隨機門號);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[1]/div[2]/div/div/bdi/div[2]/div[2]/input")).Count > 0)
                                    {
                                        IWebElement 手機號碼輸入框 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[1]/div[2]/div/div/bdi/div[2]/div[2]/input"));
                                        string inputText = 手機號碼輸入框.GetAttribute("value");

                                        if (string.IsNullOrEmpty(inputText))
                                        {
                                            手機號碼輸入框.SendKeys(台灣隨機門號);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[2]/div/div/div/div[1]/div[2]/div/p")).Count > 0)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[2]/div/div/div/div[1]/div[2]/div/p"))[0].Text.Contains("您的帳戶目前已停用"))
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                            goto 重頭來過不重開瀏覽器了;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"alt-alternate-forms-option-modal\"]")).Count > 0)//手機號被註冊
                                    {
                                        ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[4]/div[2]/div/div/div/div[1]/h2")).Count > 0)//手機號被註冊
                                    {
                                        ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo != null)
                                    {
                                        var elements = ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[4]/div/div/div[2]/div[3]/div[2]"));
                                        if (elements.Count > 0)
                                        {
                                            var firstElement = elements[0];
                                            if (firstElement != null && firstElement.Text.Contains("這是您嗎？")) //手機號被註冊
                                            {
                                                ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                                goto 重頭來過不重開瀏覽器了;
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                    // You might want to do something here, like logging the error or retrying the operation.
                                }


                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"modalTitle\"]")).Count > 0)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"modalTitle\"]"))[0].Text.Contains("這是您嗎？")) //手機號被註冊
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                            goto 重頭來過不重開瀏覽器了;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"user-select-yesme\"]/div/div[2]")).Count > 0)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"user-select-yesme\"]/div/div[2]"))[0].Text.Contains("這是我嗎？")) //手機號被註冊
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                            goto 重頭來過不重開瀏覽器了;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[3]/div/button[2]/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 下一步按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[3]/div/button[2]/div/div[2]"));
                                        actions.MoveToElement(下一步按鈕).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[3]/button[2]/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 下一步按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[3]/button[2]/div/div[2]"));
                                        actions.MoveToElement(下一步按鈕).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div/button[2]/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 下一步按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div/button[2]/div/div[2]"));
                                        actions.MoveToElement(下一步按鈕).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div/div/button[2]/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 下一步按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div/div/button[2]/div/div[2]"));
                                        actions.MoveToElement(下一步按鈕).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[4]/div[2]/div/div/div/div[2]/div/div/button[1]/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 帳號已被註冊過 = ChromeGoGo.FindElement(By.XPath("/html/body/div[4]/div[2]/div/div/div/div[2]/div/div/button[1]/div/div[2]"));
                                        ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div[2]/div/div[2]/div/div/div/div/div[2]/button/div/div[2]")).Count > 0)
                                    {
                                        IWebElement 預約失敗 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div[2]/div/div[2]/div/div/div/div/div[2]/button/div/div[2]"));
                                        actions.MoveToElement(預約失敗).Click().Perform();
                                        ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"FIRST_NAME\"]")).Count > 0)
                                    {
                                        IWebElement 名字輸入框 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"FIRST_NAME\"]"));
                                        名字輸入框.SendKeys(名字);
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"LAST_NAME\"]")).Count > 0)
                                    {
                                        IWebElement 姓氏輸入框 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"LAST_NAME\"]"));
                                        姓氏輸入框.SendKeys(姓氏);
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[3]/div[1]/label/span")).Count > 0)
                                    {
                                        IWebElement 我同意打勾按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div[3]/div[1]/label/span"));
                                        actions.MoveToElement(我同意打勾按鈕).Click().Perform();
                                        Invoke((MethodInvoker)delegate
                                        {
                                            dataGridView2.Rows[e.RowIndex].Cells["註冊數"].Value = UpdateAccountRegistrationCount(隨機生成公共Gmail帳號密碼);
                                        });
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div[1]/label/span")).Count > 0)
                                    {
                                        IWebElement 我同意打勾按鈕 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div/div/div[3]/div[1]/label/span"));
                                        actions.MoveToElement(我同意打勾按鈕).Click().Perform();
                                        Invoke((MethodInvoker)delegate
                                        {
                                            dataGridView2.Rows[e.RowIndex].Cells["註冊數"].Value = UpdateAccountRegistrationCount(隨機生成公共Gmail帳號密碼);
                                        });
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[4]/div[2]/div/div/div/div/h1")).Count > 0) //註冊失敗
                                    {
                                        UserAgent全域List陣列 = GetSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1ssSyxBkzzXgOalWHQYFfRIxTTkT7uRvP1SJRHiFpNRE", 1000);//從Google Sheet取得所有UserAgent
                                        DeleteSheetData(保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item3, "1ssSyxBkzzXgOalWHQYFfRIxTTkT7uRvP1SJRHiFpNRE", UserAgent全域List陣列, 保存瀏覽器物件繼續調用字典[dataGridView2.Rows[e.RowIndex].Cells["餅乾路徑"].Value.ToString()].Item4);
                                        ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }
                                /////////////////註冊完成後
                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/p[1]")).Count > 0)
                                    {
                                        IWebElement element = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div[2]/p[1]")); //信箱輸入框輸入後卡死
                                        string inputText = element.GetAttribute("value");
                                        if (inputText.Contains("請輸入電話號碼"))
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://auth.uber.com/v2/?breeze_local_zone=phx6&next_url=https%3A%2F%2Fwww.ubereats.com%2Flogin-redirect");
                                            goto 重頭來過不重開瀏覽器了;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id='location-typeahead-home-input']")).Count > 0)
                                    {
                                        var wait = new WebDriverWait(ChromeGoGo, TimeSpan.FromSeconds(10));
                                        if (輸入優惠碼Checkbox.Checked && 判斷輸入優惠碼輸入完成 != true)
                                        {
                                            ChromeGoGo.Navigate().GoToUrl("https://www.ubereats.com/tw?mod=promos&ps=1");
                                            try
                                            {
                                                var inputField = ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div[1]/div[2]/div[3]/div/div/div[2]/div[3]/form/div/div[1]/div/div[2]/input"));
                                                if (inputField.Count > 0)
                                                {
                                                    await Task.Delay(1500);
                                                    string[] 推薦碼列表 = 推薦碼輸入框richTextBox.Lines;
                                                    int 隨機索引 = random.Next(0, 推薦碼列表.Length);
                                                    string 隨機推薦碼 = 推薦碼列表[隨機索引];
                                                    inputField[0].SendKeys(隨機推薦碼 + OpenQA.Selenium.Keys.Enter);
                                                    await Task.Delay(1500);
                                                    判斷輸入優惠碼輸入完成 = true;
                                                    ChromeGoGo.Navigate().GoToUrl("https://www.ubereats.com/tw");
                                                    string 帳號狀態 = dataGridView2.Rows[e.RowIndex].Cells["帳號狀態"].Value?.ToString() ?? "";
                                                    string 需要累加的字串 = $"輸入優惠碼完成\n{隨機推薦碼}\n";
                                                    帳號狀態 += 需要累加的字串;
                                                    dataGridView2.Rows[e.RowIndex].Cells["帳號狀態"].Value = 帳號狀態;
                                                }
                                            }
                                            catch
                                            { }
                                        }

                                        if (新增現金付款Checkbox.Checked && 判斷是否完成新增現金單 != true)
                                        {
                                            try
                                            {
                                                ChromeGoGo.Navigate().GoToUrl("https://wallet.uber.com/payment-profile/add");
                                                await Task.Delay(1000);
                                                ChromeGoGo.SwitchTo().Frame(0);

                                                IWebElement cashButton = ChromeGoGo.FindElement(By.CssSelector(".cf:nth-child(3) .bm"));
                                                cashButton.Click();
                                                //wait.Until(ChromeGoGo => ((IJavaScriptExecutor)ChromeGoGo).ExecuteScript("return document.readyState").Equals("complete"));
                                            }
                                            catch { }

                                            await Task.Delay(1000);
                                            try
                                            {
                                                var confirmButton = ChromeGoGo.FindElement(By.XPath("//*[@id='root']/div[1]/div/div/div/div[3]/button"));
                                                confirmButton.Click();
                                                //wait.Until(ChromeGoGo => ((IJavaScriptExecutor)ChromeGoGo).ExecuteScript("return document.readyState").Equals("complete"));
                                                判斷是否完成新增現金單 = true;

                                                string 帳號狀態 = dataGridView2.Rows[e.RowIndex].Cells["帳號狀態"].Value?.ToString() ?? "";
                                                string 需要累加的字串 = "新增現金完成\n";
                                                帳號狀態 += 需要累加的字串;
                                                dataGridView2.Rows[e.RowIndex].Cells["帳號狀態"].Value = 帳號狀態;
                                            }
                                            catch { }
                                            ChromeGoGo.Navigate().GoToUrl("https://www.ubereats.com/tw");
                                        }

                                        if (獲取推薦碼Checkbox.Checked && 判斷已經獲取完推薦碼 != true)
                                        {
                                            try
                                            {
                                                await Task.Delay(2000);
                                                ChromeGoGo.Navigate().GoToUrl("https://www.ubereats.com/tw/invite");
                                                //wait.Until(ChromeGoGo => ((IJavaScriptExecutor)ChromeGoGo).ExecuteScript("return document.readyState").Equals("complete"));
                                                await Task.Delay(2200);
                                                var referralCode = ChromeGoGo.FindElement(By.XPath("/html/body/div/div[1]/div[2]/main/div/div/div[1]/div[4]/input"));
                                                dataGridView2.Rows[e.RowIndex].Cells["推薦碼"].Value = referralCode.GetAttribute("value");
                                                判斷已經獲取完推薦碼 = true;
                                            }
                                            catch
                                            { }
                                            await Task.Delay(1000);
                                            ChromeGoGo.Navigate().GoToUrl("https://www.ubereats.com/tw");
                                        }

                                        // 如果任何一個checkbox被選中，確保相應的條件都已完成，否則繼續循環
                                        if (((判斷輸入優惠碼輸入完成) || (判斷是否完成新增現金單) || (判斷已經獲取完推薦碼)) || (!輸入優惠碼Checkbox.Checked && !新增現金付款Checkbox.Checked && !獲取推薦碼Checkbox.Checked))
                                        {
                                            await Task.Delay(1000);
                                            IWebElement 點選地址並輸入 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"location-typeahead-home-input\"]"));
                                            await Task.Delay(1000);
                                            string inputText = 點選地址並輸入.GetAttribute("value");

                                            await Task.Delay(500);

                                            if (string.IsNullOrEmpty(inputText))
                                            {
                                                點選地址並輸入.Click();
                                                if (隨機地址checkbox.Checked)
                                                {
                                                    var 隨機位址 = 隨機位址方法();
                                                    dataGridView2.Rows[e.RowIndex].Cells["地址"].Value = 隨機位址;
                                                    點選地址並輸入.SendKeys(隨機位址);
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrEmpty(預設地址Combobox.Text))
                                                    {
                                                        dataGridView2.Rows[e.RowIndex].Cells["地址"].Value = 預設地址Combobox.Text;
                                                        點選地址並輸入.SendKeys(預設地址Combobox.Text);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div[1]/div[2]/main/div/div[1]/div[3]")).Count > 0)
                                    {
                                        IWebElement 判斷是否有奇怪的錯誤 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div[1]/div[2]/header/div/div/div[1]/a/img"));
                                        actions.MoveToElement(判斷是否有奇怪的錯誤).Click().Perform(); // 將滑鼠移動到目標元素上並類比點擊
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"location-typeahead-home-item-0\"]")).Count > 0)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"location-typeahead-home-item-0\"]"))[0].Text.Contains("找不到這個地址"))
                                        {
                                            ChromeGoGo.Navigate().Refresh();
                                        }
                                        else
                                        {
                                            await Task.Delay(1200);
                                            ChromeGoGo.FindElement(By.XPath("//*[@id=\"location-typeahead-home-item-0\"]")).Click();
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    IWebElement 點選地址並輸入 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"location-typeahead-home-input\"]"));
                                    string inputText = 點選地址並輸入.GetAttribute("value");
                                    if (!string.IsNullOrEmpty(inputText))
                                    {
                                        Thread.Sleep(2500);
                                        try
                                        {
                                            if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"location-typeahead-home-item-0\"]")).Count > 0)
                                            {
                                                IWebElement 點選地址並輸入1 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"location-typeahead-home-input\"]"));
                                                點選地址並輸入1.Click();
                                            }
                                            else
                                            {
                                                ChromeGoGo.Navigate().Refresh();
                                            }
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }
                                catch { }

                                try
                                {
                                    string pageSource = ChromeGoGo.PageSource;
                                    if (pageSource.Contains("too many"))
                                    {
                                        ChromeGoGo.Navigate().Refresh();
                                        goto 重頭來過不重開瀏覽器了;
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo != null && (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/feed?diningMode=DELIVERY") || ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/feed")))
                                    {
                                        try
                                        {
                                            if (秘密用Checkbox != null && 秘密用Checkbox.Checked)
                                            {
                                                goto 跳轉到另一個while;
                                            }
                                        }
                                        catch { }

                                        int attempts = 0;
                                        bool foundFreeShippingButton = false;

                                        while (attempts < 5 && !foundFreeShippingButton)
                                        {
                                            try
                                            {
                                                if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div[1]/div[2]/div[4]/div/div/div[2]/div[3]/div/button/div")).Count > 0)
                                                {
                                                    IWebElement 免運點擊 = ChromeGoGo.FindElement(By.XPath("/html/body/div[1]/div[1]/div[2]/div[4]/div/div/div[2]/div[3]/div/button/div"));
                                                    免運點擊.Click();
                                                    foundFreeShippingButton = true;
                                                }
                                            }
                                            catch { }

                                            if (!foundFreeShippingButton)
                                            {
                                                await Task.Delay(1200); // 等待2秒後再次尋找免運按鈕
                                                attempts++;
                                            }
                                        }

                                        if (!foundFreeShippingButton)
                                        {
                                            if (預設店家網址Combobox != null && !string.IsNullOrEmpty(預設店家網址Combobox.Text))
                                            {
                                                ChromeGoGo.Navigate().GoToUrl(預設店家網址Combobox.Text);
                                            }
                                            if (改成後台運行 != null && 改成後台運行.Checked)
                                            {
                                                await Task.Delay(4000);
                                                if (ChromeGoGo != null)
                                                {
                                                    ChromeGoGo.Quit();
                                                    await Task.Delay(500);
                                                    ChromeGoGo.Dispose();
                                                    await Task.Delay(1500);
                                                }
                                                if (dataGridView2 != null && dataGridView2.Rows.Count > e.RowIndex && dataGridView2.Columns.Contains("啟動"))
                                                {
                                                    dataGridView2_CellContentClick(dataGridView2, new DataGridViewCellEventArgs(dataGridView2.Rows[e.RowIndex].Cells["啟動"].ColumnIndex, dataGridView2.Rows[e.RowIndex].Index));
                                                }
                                            }
                                            return;
                                        }
                                    }
                                }
                                catch { }


                                await Task.Delay(100);
                            }
                            跳轉到另一個while:
                            var web = new HtmlWeb();
                            while (!是否中斷所有while)
                            {
                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/feed?diningMode=DELIVERY") || ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/feed"))
                                    {
                                        try
                                        {
                                            if (秘密用Checkbox.Checked)
                                            {
                                                ChromeGoGo.GoToUrl(隨機店家網址方法());
                                            }
                                        }
                                        catch { }
                                    }
                                }
                                catch { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[4]/div/div/div[2]/div[3]/div[2]")).Count > 0)
                                        {
                                            if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[4]/div/div/div[2]/div[3]/div[2]"))[0].Text.Contains("要等到營業時間才會接受訂單"))
                                            {
                                                ChromeGoGo.GoToUrl(隨機店家網址方法());
                                            }
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"root\"]/div[2]/div/div/div[2]/div/div/div/div/div[5]/button[1]")).Count > 0)
                                        {
                                            IWebElement 如果店家有需要預約就去點 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"root\"]/div[2]/div/div/div[2]/div/div/div/div/div[5]/button[1]"));
                                            actions.MoveToElement(如果店家有需要預約就去點).Click().Perform();
                                            Thread.Sleep(2000);
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div/div[1]")).Count > 0)
                                        {
                                            if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div/div[1]"))[0].Text.Contains("這裡沒有餐點可提供"))
                                            {
                                                ChromeGoGo.GoToUrl(隨機店家網址方法());
                                            }
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div/div[2]")).Count > 0)
                                        {
                                            if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div/div[2]"))[0].Text.Contains("糟糕！發生錯誤"))
                                            {
                                                ChromeGoGo.GoToUrl(隨機店家網址方法());
                                            }
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked) //黑色空白畫面
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("/html/body/div[1]/div[1]/div[2]/main/div[2]/div/figure/div[3]")).Count > 0)
                                        {
                                            ChromeGoGo.GoToUrl(隨機店家網址方法());
                                        }
                                    }
                                }
                                catch
                                { }

                                //try
                                //{
                                //    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked) //黑色空白畫面
                                //    {
                                //        var doc = new HtmlAgilityPack.HtmlDocument();
                                //        using (var client = new WebClient())
                                //        {
                                //            var html = client.DownloadString(ChromeGoGo.Url);
                                //            doc.LoadHtml(html);
                                //        }
                                //        //MessageBox.Show(doc.DocumentNode.ToString());
                                //        var items = doc.DocumentNode
                                //            .SelectNodes("//div[contains(@class, 'item')]") // 使用適當的XPath選擇器選擇餐點節點
                                //            .Select(node => new
                                //            {
                                //                Name = node.SelectSingleNode(".//h3")?.InnerText.Trim(),
                                //                Price = decimal.TryParse(node.SelectSingleNode(".//span[contains(@class, 'price')]")?.InnerText.Trim(), out decimal price) ? price : (decimal?)null,
                                //                QuickViewButton = node.SelectSingleNode(".//button[contains(@class, 'quick-view')]"),
                                //            })
                                //            .Where(x => x.Price.HasValue && x.Price.Value < 48)
                                //            .ToList();

                                //        if (items.Any())
                                //        {
                                //            var selectedItem = items.First();
                                //            Console.WriteLine($"選擇的餐點：{selectedItem.Name}，價格：{selectedItem.Price}");

                                //            ChromeGoGo.Navigate().GoToUrl(ChromeGoGo.Url);
                                //            var quickViewElement = ChromeGoGo.FindElement(By.XPath(selectedItem.QuickViewButton.XPath));
                                //            quickViewElement.Click();

                                //            // 在這裡處理快速檢視的其他操作
                                //        }
                                //    }
                                //}
                                //catch
                                //{ }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/store") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div[2]/div/figure/div[3]/div/div")).Count > 0)
                                        {
                                            if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div[2]/div/figure/div[3]/div/div"))[0].Text.Contains("附近沒有合作外送夥伴提供服務") || ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div[2]/div/figure/div[3]/div/div"))[0].Text.Contains("目前暫停服務") || ChromeGoGo.FindElements(By.XPath("//*[@id=\"main-content\"]/div[2]/div/figure/div[3]/div/div"))[0].Text.Contains("距離太遠，無法外送"))
                                            {
                                                ChromeGoGo.GoToUrl(隨機店家網址方法());
                                            }
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    string pageSource = ChromeGoGo.PageSource;
                                    if (pageSource.Contains("too many"))
                                    {
                                        ChromeGoGo.Navigate().Refresh();
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/orders") && 秘密用Checkbox.Checked)
                                    {
                                        if (ChromeGoGo.FindElements(By.XPath("//*[@id=\"wrapper\"]/div[3]/div/div/div[2]/div[3]/button")).Count > 0)
                                        {
                                            IWebElement 取消訂單點擊元素 = ChromeGoGo.FindElement(By.XPath("//*[@id=\"wrapper\"]/div[3]/div/div/div[2]/div[3]/button"));
                                            actions.MoveToElement(取消訂單點擊元素).Click().Perform();
                                            取消訂單點擊元素.Click();
                                            actions.MoveToElement(取消訂單點擊元素).Click().Perform();
                                            取消訂單點擊元素.Click();
                                            break;
                                        }
                                    }
                                }
                                catch
                                { }

                                try
                                {
                                    if (ChromeGoGo.Url.StartsWith("https://www.ubereats.com/tw/orders") && 秘密用Checkbox.Checked)
                                    {
                                        if (IsValidOrderUrl(ChromeGoGo.Url))
                                        {
                                            string cancelOrderUrl = GenerateCancelOrderUrl(ChromeGoGo.Url);
                                            ChromeGoGo.GoToUrl(cancelOrderUrl);
                                        }
                                    }
                                }
                                catch
                                { }
                            }
                        }
                    })/*.ConfigureAwait(false)*/;
            }
            catch { goto 重跑async; }
        }
        private int UpdateAccountRegistrationCount(string account)
        {
            // 获取第二个richtextbox的内容，并按行分割
            string input = form4.form4信箱註冊次數顯示richtextbox.Text;
            string[] lines = input.Split('\n');

            // 初始化第二个richtextbox的更新内容
            StringBuilder sb = new StringBuilder();

            // 遍历第二个richtextbox的每一行
            int newCount = 0;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];

                // 使用正则表达式匹配账户名称
                Regex accountRegex = new Regex($"^{account} ");
                if (accountRegex.IsMatch(line.Trim()))
                {
                    // 分割行以获取当前次数，然后将次数加1
                    string[] parts = line.Trim().Split(new string[] { "，註冊次數" }, StringSplitOptions.None);
                    int currentCount = int.Parse(parts[1].Replace("次", ""));
                    newCount = currentCount + 1;

                    // 更新行内容
                    if (i != lines.Length - 1)
                    {
                        sb.Append($"{parts[0]}，註冊次數{newCount}次" + Environment.NewLine);
                    }
                    else
                    {
                        sb.Append($"{parts[0]}，註冊次數{newCount}次");
                    }
                }
                else
                {
                    // 保留原行内容
                    if (i != lines.Length - 1)
                    {
                        sb.Append(line + Environment.NewLine);
                    }
                    else
                    {
                        sb.Append(line);
                    }
                }
            }

            // 更新第二个richtextbox的内容
            form4.form4信箱註冊次數顯示richtextbox.Text = sb.ToString();
            return newCount;
        }


        private static bool IsValidOrderUrl(string orderUrl)
        {
            Regex urlPattern = new Regex(@"^https:\/\/www\.ubereats\.com\/tw\/orders\/[a-zA-Z0-9-]+$");
            return urlPattern.IsMatch(orderUrl);
        }
        private static string GenerateCancelOrderUrl(string orderUrl)
        {
            // Extract the order ID from the order URL using a regular expression
            Regex orderIdRegex = new Regex(@"orders/([a-zA-Z0-9-]+)");
            Match orderIdMatch = orderIdRegex.Match(orderUrl);
            string orderId = orderIdMatch.Groups[1].Value;

            // Generate the cancel order URL by appending the necessary parameters
            string cancelOrderUrl = $"https://www.ubereats.com/tw/orders?mod=cancelOrder&modctx={orderId}&ps=1";
            return cancelOrderUrl;
        }

        public string 隨機位址方法()
        {
            // 將您的地址放入一個字串陣列中
            string[] addresses = {
"台灣大學",
"清華大學",
"交通大學",
"成功大學",
"中央大學",
"中山大學",
"政治大學",
"中正大學",
"東海大學",
"輔仁大學",
"淡江大學",
"靜宜大學",
"義守大學",
"元智大學",
"世新大學",
"建國高中",
"北一女中",
"景美女中",
"中山女中",
"復興高中",
"新竹高中",
"新民高中",
"成功高中",
"鳳新高中",
"光復高中",
"三民家商",
"臺北榮民總醫院",
"臺北醫學大學附設醫院",
"林口長庚紀念醫院",
"臺北長庚紀念醫院",
"國泰綜合醫院",
"光田綜合醫院",
"義大醫院",
"新光吳火獅紀念醫院",
"中山醫學大學附設醫院",
"八德長庚紀念醫院",
"新竹馬偕紀念醫院",
"彰化基督教醫院",
"高雄長庚紀念醫院",
"高雄榮民總醫院",
"開南大學",
"大葉大學",
"明志科大",
"僑光科技大學",
"弘光科技大學",
"中臺科技大學",
"南開科技大學",
"嶺東科技大學",
"元培醫事科大",
"景文高中",
"磐石高中",
"達人高中",
"龍岡高中",
"內湖高中",
"永和高中",
"三重博愛醫院",
"八德博愛醫院",
"新北市立鶯歌醫院",
"新北市立土城醫院",
"仁愛醫院",
"義大癌治療中心",
"臺南市立安南醫院",
"正修科技大學",
"明新科技大學",
"修平科大",
"美和科技大學",
"中州科技大學",
"建國科技大學",
"華夏科技大學",
"致理科技大學",
"新莊高中",
"新北高中",
"國華高中",
"淡江高中",
"安康醫院",
"新莊仁愛醫院",
"桃園仁愛醫院",
"彰化市立醫院",
"明志科技大學",
"元培醫事科技大學",
"景文科技大學",
"北大高中",
"大成高中",
"新光高中",
"新北市立中和高中",
"法鼓文理學院",
"崇右影藝科技大學",
"台灣首府大學",
"大同技術學院",
"勤益科技大學",
"修平科技大學",
"南亞技術學院",
"遠揚科技大學",
"東方設計大學",
"大同高中",
"新興高中",
"永平高中",
"黎明技術學院",
"吳鳳科技大學",
"高雄醫學大學",
"長庚科技大學",
"樹人醫護管理專科學校",
"南榮科技大學",
"建國中學",
"開南高中",
"金華高中",
"石碇高中",
"新莊文化高中",
"德明財經科技大學",
"東南科技大學",
"中華醫事科技大學",
"慈濟科技大學",
"環球科技大學",
"龍華科技大學",
"板橋高中",
"永春高中",
"南港高中",
"薪水高中",
"萬芳高中",
"士林高中",
"南區高中",
"土城高中",
"新北市立新莊醫院",
"新北市立樹林醫院",
"新北市立新店醫院",
"新店高中",
"新竹女中",
"新北市立林口高中",
"宜蘭高中",
"彰化女中",
"高雄市立大同醫院",
"恩主公醫院",
"桃園慈濟醫院",
"新樓醫院",
"宜蘭市立醫院",
"文山高中",
"樹林高中",
"新北市立新莊高中",
"國泰醫療財團法人國泰綜合醫院",
"衛生福利部桃園醫院",
"新北市立聯合醫院",
"義大醫療財團法人義大醫院",
"衛生福利部新竹醫院",
"南西高中",
"南光高中",
"中原高中",
"長庚醫療財團法人基隆長庚紀念醫院",
"臺北市立萬芳醫院",
"亞洲大學",
"輔英科技大學",
"朝陽科技大學",
"大庭高中",
"大興高中",
"大忠高中",
"大義高中",
"新豐高中",
"實踐大學",
"勤益科大",
"亞東科技大學",
"長榮大學",
"嘉義大學",
"大同大學",
"士林高商",
"中正高中",
"國光高中",
"嘉義高中",
"竹南高中",
"逢甲大學",
"銘傳大學",
"長庚大學",
"高師大",
"高雄大學",
"中央員警大學",
"國防醫學院",
"空軍航空技術學院",
"瑞芳高中",
"中和高中",
"屏東高中",
"彰化高中",
"臺北市立聯合醫院",
"臺北慈濟醫院",
"基隆長庚紀念醫院",
"臺北國泰醫院",

    };

            // 創建一個隨機數生成器
            Random random = new Random();

            // 根據陣列的長度隨機選擇一個索引
            int randomIndex = random.Next(addresses.Length);

            // 根據隨機索引返回對應的位址
            return addresses[randomIndex];
        }
        public string 隨機店家網址方法()
        {
            // 將您的地址放入一個字串陣列中
            string[] addresses = {
"https://www.ubereats.com/tw/store/%E7%82%B8%E8%80%81%E5%A4%A7%E9%B9%B9%E9%85%A5%E9%9B%9E-%E8%8F%AF%E7%A6%8F%E5%BA%97/1ofeeZq6R2qdF2AqPElvBA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNCVCOCVBRCVFNSU5MiU4QyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpnZWFub3BvQ2FEUVJudkVKOU1QaC0yZyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45OTQzNjYzJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjQ3ODA1MTIlN0Q%3D",
"https://www.ubereats.com/tw/store/%E8%92%9C%E7%BF%BB%E5%A4%A9%E9%B9%BD%E9%85%A5%E9%9B%9E-%E6%B8%85%E5%A4%A7%E5%BA%97/L8Z3WAxIVMaU9qFNpyNP2g?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNiVCOCU4NSVFOCU4RiVBRiVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpCN1pOelhJMmFEUVJFd1IyMmx0ZEt4RSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC43OTYxMjE3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjk5NjY2OTklN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%A5%8A%E8%A8%98%E7%82%92%E9%A3%AF/pHHcr3LvQeuUz9MkOr4tbA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNiU4OCU5MCVFNSU4QSU5RiVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUoweUFJS2UxMmJqUVJucUVING9zQzd1QSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi45OTY3NjI1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjIxNjg1NjQlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%9F%B3%E4%BA%8C%E9%8D%8B-%E4%B8%AD%E5%A3%A2%E4%B8%AD%E7%BE%8E%E5%BA%97/U78GGN-rQrCvrWoLtJtQQg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNCVCOCVBRCVFNSVBNCVBRSVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp5MDJRN01FamFEUVJWdVJjUmRRcHdjMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NjgxNTU4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjE5NTI5ODglN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%87%8E%E9%9B%9E%E9%A8%8E%E5%A3%AB/lnns8mDhSTCxXqVzhrrDbA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNCVCOCVBRCVFNiVBRCVBMyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpSM2dIMTFhLWJqUVJwQkRSUHNCOHFSNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMy41NjMzNzYxJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjQ3Mjg4MzElN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%88%B0%E9%AC%A5%E9%9B%9E-%E6%B2%B9%E9%9B%9E-%E9%86%89%E9%9B%9E-%E8%BC%95%E9%A3%9F-%E5%98%89%E7%BE%A9%E6%B0%91%E9%9B%84%E5%BA%97/8ClPbwapSKuGWqGXs35NlQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNCVCOCVBRCVFNiVBRCVBMyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpSM2dIMTFhLWJqUVJwQkRSUHNCOHFSNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMy41NjMzNzYxJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjQ3Mjg4MzElN0Q%3D",
"https://www.ubereats.com/tw/store/%E8%82%89%E5%9C%93%E4%BC%AF/CdkTufL0SouM4gjlj0uK2A?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5RCVCMSVFNiVCNSVCNyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpCMmRBT2h3LWFUUVJhb0N5VDd3QlBkUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4xODI0Njg5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjYwMjU0NzQlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%AD%94%E7%8E%8B%E5%8E%9A%E5%88%87%E5%82%B3%E7%B5%B1%E9%9B%9E%E6%8E%92-%E6%B2%99%E9%B9%BF%E5%BA%97/exxCadUJUGmUxFScRE7k6w?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSU5RCU5QyVFNSVBRSU5QyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp6M3JRUDZzVmFUUVJvMVI2Q1dkSjZvcyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4yMjU4MDI3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjU3NzE5MTMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%A6%8F%E8%90%B1%E5%B0%8F%E5%90%83%E9%83%A8/PgUFClpgR6SrK0yRW9kZLA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSU5RCU5QyVFNSVBRSU5QyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp6M3JRUDZzVmFUUVJvMVI2Q1dkSjZvcyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4yMjU4MDI3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjU3NzE5MTMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%A9%8B%E9%A0%AD%E6%9E%97%E5%A7%90%E9%AE%AE%E9%AD%9A%E6%B9%AF/JaJqYPkXSZa5-9xq9qL27w?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNyVCRSVBOSVFNSVBRSU4OCVFNSVBNCVBNyVFNSVBRCVCOCVFOSU4NiVBQiVFNSVBRCVCOCVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpTVEZaN3UwUmJqUVJYaVhFUnVSLUhGbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi43NjM4MDY2JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjM2MjYwNTMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%91%A8%E5%A7%90%E9%BA%B5%E5%BA%97/7z_eHmaAXj-hwS8AKmbi7A?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFOSVCMyVCMyVFNiU5NiVCMCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp3ZkhteDZ3RWJqUVIwSXRGcmpWWHhXayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi42MTMwNDM0JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjM0MzE0MDMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%BB%91%E8%B2%93%E6%BB%B7%E5%91%B3/wPTohLcMRp2UwDM9ED291g?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNyVBQiVCOSVFNSVCOCU4MiVFNSU4NSU4OSVFNSVCRSVBOSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpJV3Q1VFhNMmFEUVJfY0JyMi1Nc3JRNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC43OTgzODY5OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMC45OTQwNTYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%8F%94%E5%85%AC-%E8%99%B1%E7%9B%AE%E9%AD%9A%E6%B9%AF-%E7%82%92%E9%A3%AF%E5%B0%88%E8%B3%A3%E5%BA%97/AHdBi7OMVVSEbw1Egz4KnA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSVBQiU5OCVFOSU5QiU4NCVFNSVCOCU4MiVFNyVBQiU4QiVFNCVCOCU4OSVFNiVCMCU5MSVFOSVBQiU5OCVFNyVCNCU5QSVFNSVBRSVCNiVFNCVCQSU4QiVFNSU5NSU4NiVFNiVBNSVBRCVFOCU4MSVCNyVFNiVBNSVBRCVFNSVBRCVCOCVFNiVBMCVBMSUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpmN2hPN0FZRmJqUVJPRU9nUXgtYWE1ayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi42NjY5NDYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuMzAxMTk1MiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E6%8B%89%E4%BA%9E%E6%BC%A2%E5%A0%A1-%E9%BE%8D%E6%BD%AD%E4%B8%AD%E8%88%88%E5%BA%97/RNVNIc71QEuKE9dz2HbyGg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSVCRSU4RCVFNiVCRCVBRCVFNSU5QyU4QiVFNSVCMCU4RiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpiODJaaTBjOWFEUVJ3dVhHYzdCT1hhSSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC44NjQyNzk4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjIxNDQzNDYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%85%AC%E9%A4%A8%E8%87%AD%E8%87%AD%E9%8D%8B/vkUC230UXVWd2Npv1ybhNw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNSVBNCVBNyVFNSVBRSU4OSVFNSU4RCU4MCVFOSU4NyU5MSVFOCU4RiVBRiVFNSU5QyU4QiVFNiVCMCU5MSVFNSVCMCU4RiVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpLNUJSQUlPcFFqUVJCcWZzWmVhR1BTcyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMzIyNzY2JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUyNzc2NjclN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%99%BD%E6%AF%9B%E9%98%BF%E4%BC%AF%E7%A2%B3%E7%83%A4/vZdunMVKX1yX9ClILQi69w?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiVBMSU4MyVFNSU5QyU5MiVFNSVCOCU4MiVFOCU5OCU4NiVFNyVBQiVCOSVFNSU4RCU4MCVFNiU5NiVCMCVFOCU4OCU4OCVFNSU5QyU4QiVFNiVCMCU5MSVFNSVCMCU4RiVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpKNHRpVUg0ZmFEUVJfVnViVldTMTE1MCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMDgyMTg5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjI2NDk1NiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E6%B0%B8%E5%92%8C%E8%B1%86%E6%BC%BF-%E9%BE%8D%E5%AE%89%E8%A1%97%E5%BA%97/9UNU08rtQOOZ4TuBR3VDHg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiVBMSU4MyVFNSU5QyU5MiVFNSVCOCU4MiVFOCU5OCU4NiVFNyVBQiVCOSVFNSU4RCU4MCVFNiU5NiVCMCVFOCU4OCU4OCVFNSU5QyU4QiVFNiVCMCU5MSVFNSVCMCU4RiVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpKNHRpVUg0ZmFEUVJfVnViVldTMTE1MCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMDgyMTg5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjI2NDk1NiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E7%AC%AC%E4%B8%80%E9%A6%99%E7%84%BF%E7%9A%84%E5%B0%88%E8%B3%A3%E5%BA%97/icyI3W_OS6uVlnoW15AvrA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNiVBNiVBRSVFNiVCMCU5MSVFNyVCOCVCRCVFOSU4NiVBQiVFOSU5OSVBMiUyMCVFNiVBMSU4MyVFNSU5QyU5MiVFNSU4OCU4NiVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpOVE1zQzF3ZWFEUVJ3dk9PbjZhYktkOCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMDM3NjgyJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjMyNTIxMTMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%9C%B1%E8%A8%98%E9%A4%A1%E9%A4%85%E7%B2%A5-%E9%81%A0%E7%99%BE%E4%BF%A1%E7%BE%A9a13/C_N3gx0RTf6pwpfo7H7KCA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFOSU4NiVBQiVFNSVBRCVCOCVFNSVBNCVBNyVFNSVBRCVCOCVFOSU5OSU4NCVFOCVBOCVBRCVFOSU4NiVBQiVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUplNUJFMGJTclFqUVJrUUR3Ri1UdjVMYyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMjcyNDQ1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU2MzE1MTUlN0Q%3D",
"https://www.ubereats.com/tw/store/%E8%98%BF%E6%A8%82%E7%BE%A9%E9%BA%B5%E5%9D%8A%E7%92%B0%E4%B8%AD%E5%BA%97/0R7AKQW8Qcav3WxVvJwblQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiVBMSU4MyVFNSU5QyU5MiVFNSVCOCU4MiVFNCVCOCVBRCVFNSVBMyVBMiVFNSU4RCU4MCVFNCVCOCVBRCVFNiVBRCVBMyVFNSU5QyU4QiVFNiVCMCU5MSVFNSVCMCU4RiVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp0WnRvdjZrWWFEUVJ5bXBDN0ZUcE91ayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NjE5NzM4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjI2MjIwNzMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%9F%B3%E4%BA%8C%E9%8D%8B-%E6%B0%91%E6%AC%8A%E9%BE%8D%E6%B1%9F%E5%BA%97/mmXXGkzxSICycFAbucuHag?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVCRSVCNyVFNiU5OCU4RSVFOCVCMiVBMSVFNyVCNiU5MyVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp3V2l6MEd1c1FqUVJkbTJscl9ua2lQbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wODY1NTA5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU2NTQ5MjMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%A3%9F%E7%A5%9E%E6%BB%B7%E5%91%B3-%E6%A1%83%E5%9C%92%E8%8E%8A%E6%95%AC%E5%BA%97/u2860IkQSHK_6igWmvCpug?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSU5NiU4QiVFNSU4RCU5NyVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpJYlhXc000ZmFEUVI3bVlqRjJ5dnJxSSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMTEzNjczJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjI3MDIwOCU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E7%BE%A9%E6%9D%AF%E9%AE%AE%E6%9E%9C%E9%A3%B2%E6%96%99%E5%BA%97/3I9Vt4HRWHeUeDMy2hgzuw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVBNCVBNyVFOCU5MSU4OSVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUo5WFloeVZ3M2FUUVIxa04wSGxKQVNXVSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wMDAyNDQlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuNTk2NDUzNCU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E6%AE%B5%E7%B4%94%E8%B2%9E-%E5%85%A7%E6%B9%96%E7%91%9E%E5%85%89%E5%BA%97/vGBk_8pcSmOr_zZXDgP0tg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVBNCVBOSVFNCVCOCVCQiVFNiU5NSU5OSVFOSU4MSU5NCVFNCVCQSVCQSVFNSVBNSVCMyVFNSVBRCU5MCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpyU3M1a1l1c1FqUVJQbkREeVp2OVV0VSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wODA5MjU2JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU4Nzc2NTMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%8F%8D%E5%8F%A3%E5%91%B3%E8%87%AA%E5%8A%A9%E9%A4%90-%E4%BE%BF%E7%95%B6/CWEG8KPeR-K4lwM6WHdFiQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNiU5RCVCMSVFNyVCOCVBMyVFNyVBQiU4QiVFNiU5NiVCMCVFNyU5NCU5RiVFNSU5QyU4QiVFNiVCMCU5MSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpKenRoZzNLNWJ6UVJBSmRRYzFmMnFZNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi43NjIwNDE3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjEzNTQwOTUlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%9A%94%E5%A3%81%E5%AE%B5%E5%A4%9C-%E6%96%B0%E5%8C%97%E6%97%97%E8%89%A6%E5%BA%97/aHYmJJhUVkuPVVCjrVHSGA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFOSVCMyVCMyVFOSVCMyVCNCVFNSU5QyU4QiVFNiVCMCU5MSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpFYUkzbDdnZWFEUVJhQTV4aElzYVpZayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45Njc1MTElMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuMzMxODI3JTdE",
"https://www.ubereats.com/tw/store/%E9%87%91%E8%B4%8A-%E5%A4%A7%E8%85%B8%E9%BA%B5%E7%B7%9A/zDGPRXgTVbyltXrZE0akcw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSU4NSVBNyVFNiVCOSU5NiVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUo1VlVBRkltc1FqUVJXelVuaHVuMFhPMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNzc4NzY3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU4Njc4NTElN0Q%3D",
"https://www.ubereats.com/tw/store/%E4%B8%8D%E5%90%83%E4%B8%8D%E5%8F%AF%E9%B9%B9%E6%B0%B4%E9%9B%9E-%E9%B6%AF%E6%A1%83%E5%BA%97/c-xuVBgaQ5ivyOfobvLnFg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFOSVCMyVCMyVFOSVCMyVCNCVFNSU5QyU4QiVFNiVCMCU5MSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpFYUkzbDdnZWFEUVJhQTV4aElzYVpZayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45Njc1MTElMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuMzMxODI3JTdE",
"https://www.ubereats.com/tw/store/%E7%B0%A1%E5%96%AE%E9%A3%AF%E7%9B%92/nS89qi-qQ-WqWer8ojLXgQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5RiU5NCVFNSVCRiU4MyUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpuMVVvelVNamFEUVJHUUc0TDZnM1FtVSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45MTU4NjQ1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjE4NTY5OTklN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%B0%8F%E6%9D%8E%E5%AD%90%E6%B8%85%E7%B2%A5%E5%B0%8F%E8%8F%9C/ssmvzQh6RPaJWtS9LC66Wg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSVBQiU5OCVFNCVCOCVBRCVFNiU5QiVCOCVFNSVCMSU4MCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUo1MXpzVS02cFFqUVIzbmRueVlLRDJYRSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMDcxMjYyJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUyMzE3OTIlN0Q%3D",
"https://www.ubereats.com/tw/store/%E8%A5%BF%E9%96%80%E8%BB%8A%E8%BC%AA%E9%A4%85/SLNrRJd4QJCPvEVV_OThBA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFOCU5MCVBQyVFOCU4RiVBRiVFNSU4RCU4MCVFOSVCRSU4RCVFNSVCMSVCMSVFNSU5QyU4QiVFNiVCMCU5MSVFNSVCMCU4RiVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpWX0xqRHF5cFFqUVJMaTExLUIwZzZxdyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMzU2NjQ4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjQ5NjE1NTIlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%B9%B8%E7%A6%8F%E7%82%92%E9%A3%AF/pVqlv2pVQZ6owqzAeXkWZA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSU5QyU5RiVFNSU5RiU4RSVFOSU4NiVBQiVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpid3RDcXRNQ2FEUVJ3YmFETUFEeXZkWSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NzYxNDk4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjQ0ODcyNDYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%A4%93%E5%B8%AB%E5%85%84%E9%B9%BD%E9%85%A5%E9%9B%9E/mxbQT6A-WcWp6QHiWGwFTw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNyVCRSVBOSVFNSVBNCVBNyVFNyU5OSU4QyVFNiVCMiVCQiVFNyU5OSU4MiVFOSU4NiVBQiVFOSU5OSVBMiVFNiU4MCVBNSVFOCVBOCVCQSUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpUZXp3MlBJUmJqUVJUSjloVnBWZGlWayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi43NjYwODIzJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjM2NTY3OSU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%A4%A7%E5%A7%86%E5%93%A5%E8%9A%B5%E4%BB%94%E7%85%8E/q6R-blVbS0a0NVwEoGFV_A?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFOCU4RSU4QSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprVUNqWmRhblFqUVJWRERBbGJ0LW1ZUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNDgyMjYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNDQ0NTQwMiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%8F%B0%E7%81%A3%E8%94%A1%E8%99%B1%E7%9B%AE%E9%AD%9A/6L0Rq6AeRW-JHfdsjmXNEw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNyVBNyU4MSVFNyVBQiU4QiVFOCU4MSU5NiVFNSVCRiU4MyVFOSVBQiU5OCVFNCVCOCVBRCVFOSU4MCVCMiVFNCVCRiVBRSVFNSVBRCVCOCVFNiVBMCVBMSUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpxLUFHS0cxT1hUUVJSWGdFaEd3RzZWayUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4xMzUyODg3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjczNDA0MTklN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%87%91%E6%AD%A3%E5%8F%B0%E7%81%A3%E5%B0%8F%E5%90%83/r0bWfybpRtG4XgJSy5QCFg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFOCU4RSU4QSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprVUNqWmRhblFqUVJWRERBbGJ0LW1ZUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNDgyMjYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNDQ0NTQwMiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%B7%A7%E5%91%B3%E5%B1%8B/z5f3x2ybQiiCKfXza_5DMg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFOCU4RSU4QSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprVUNqWmRhblFqUVJWRERBbGJ0LW1ZUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNDgyMjYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNDQ0NTQwMiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E9%98%BF%E9%B4%BB%E7%81%AB%E9%8D%8B/FNm7QsnBRGyd_TgP3XieOQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFOCU4RiVBRiVFNSU5QyU4QiVFNiVCMCU5MSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpyU3E5eTRibVp6UVJpamhfWjlkVl9zMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC42Nzc4ODM1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjc2MTUwODUlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%87%91%E9%99%B5%E5%8C%85%E5%AD%90/kg5nkKY1QRST_qLIOhXK3A?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU4NSU4MyVFNSU5RiVCOSVFOSU4NiVBQiVFNCVCQSU4QiVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprX01wNTRkS2FEUVJfRFJRS1dBSUFFMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC43NzYzMzclMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuOTQyODI5NiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%BB%A3%E7%A6%8F%E9%8D%8B%E7%87%92%E9%BA%B5/qwXlM9RoRVa3w88PVJY0cg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiVBMSU4MyVFNSU5QyU5MiVFNSVCOCU4MiVFNyVBQiU4QiVFNSVBNCVBNyVFNiU4OCU5MCVFNSU5QyU4QiVFNiVCMCU5MSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpZOG0zM2RRWWFEUVJJSm9vQ1o4MTlEZyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NTgxMDcyJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjMwNTA4OSU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%AE%B6%E5%92%8C%E6%8E%92%E9%AA%A8%E4%BE%BF%E7%95%B6/pJwP3uOZTCWmHF4hDQOaLw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4NSU4OSVFNSVBRCVCOCVFNiVBMCVBMSVFOCVCMiVBMSVFNSU5QyU5OCVFNiVCMyU5NSVFNCVCQSVCQSVFOSVBQiU5OCVFOSU5QiU4NCVFNSVCOCU4MiVFNiU5NiVCMCVFNSU4NSU4OSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpveXh0QnFvYmJqUVJMdFcwampBSF91dyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi42MzUwNTY3OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMC4zOTAyNTkzJTdE",
"https://www.ubereats.com/tw/store/%E9%98%BF%E6%A1%82%E7%82%92%E9%A3%AF%E7%82%92%E9%BA%B5%E7%B2%A5/fgff3lWURt-5GjFj5nNIqQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVCNCU4NyVFNSU4RiVCMyVFNSVCRCVCMSVFOCU5NyU5RCVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpMYVMwY0VoT1hUUVJKZWVTWGt5UkNhNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4xMzE4Nzk3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjc1NDAwNzElN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%82%85%E6%B0%8F%E5%B0%8F%E5%90%83/1_xQP3y8TqCQE7XdLIh8Gg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNCVCRiVBRSVFNSVCOSVCMyVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUplZVNaNERRamFUUVJzWnNFRzdXSEFEbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wOTU3OTgxOTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMC43MTMwMjY0JTdE",
"https://www.ubereats.com/tw/store/%E8%92%9C%E7%BF%BB%E5%A4%A9-%E5%8F%B0%E5%8C%97%E4%B8%AD%E5%8E%9F%E5%BA%97/T665A5d6X2yLxVbyzF3eYg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVBNCVBNyVFNSU5MCU4QyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUptWkctM0YtcFFqUVI2MlQ1MG1ab0hJbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNTUwMjE2OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMS41MzUyNzIzJTdE",
"https://www.ubereats.com/tw/store/%E6%B5%AF%E5%B3%B6%E6%BC%81%E5%A4%AB%E7%B2%A5/kUnSCqtwTpiA1ofp6dM1RA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFOCU4OCU4OCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUptMmhFc2xFZmFEUVJxdFFBdFgwTlpINCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NzUxNzQlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuMjcxODU1JTdE",
"https://www.ubereats.com/tw/store/%E6%B3%A2%E7%89%B9%E6%9B%BC%E9%B9%B9%E9%85%A5%E9%9B%9E/6tcErBwNT8Wm8z7oYJSIsw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFOCU4RSU4QSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprVUNqWmRhblFqUVJWRERBbGJ0LW1ZUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNDgyMjYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNDQ0NTQwMiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E6%9D%BF%E6%A9%8B%E4%B8%89%E8%BC%AA%E8%BB%8A%E9%B9%B9%E9%85%A5%E9%9B%9E/6zsICHYFWvWV0xzIKBkz-w?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFOCU4RSU4QSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUprVUNqWmRhblFqUVJWRERBbGJ0LW1ZUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNDgyMjYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNDQ0NTQwMiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E9%BA%BB%E8%BE%A3%E5%A4%A9%E5%90%8E%E7%82%92%E9%A6%99%E9%8D%8B-%E6%96%87%E5%B1%B1%E6%99%AF%E7%BE%8E%E5%BA%97/fwyb_Y1tSmCPa24ltZj1bw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5NiVCMCVFNSVCQSU5NyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp6VWRHbUI0Q2FEUVJsVHZsQVZGR3dJMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NzUyMzcyJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUzMjM0OTElN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%93%81%E4%BD%B3%E9%AE%AE%E5%A5%B6%E7%B4%85%E8%B1%86%E9%A4%85/mv7NlJobR-mxbMD2xqMGlQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSVBQiU5OCVFOSU5QiU4NCVFOSU4NiVBQiVFNSVBRCVCOCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpMelkyYi1VRWJqUVIzX3RrYlF5ZTlvUSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi42NDcyNyUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMC4zMTA3NDY4JTdE",
"https://www.ubereats.com/tw/store/%E9%9B%9E%E8%82%89%E7%94%B7%E9%B9%BD%E6%B0%B4%E9%9B%9E-%E6%9E%97%E5%8F%A3%E9%95%B7%E5%BA%9A%E5%BA%97/wczeK6L2UBSCIQCTc91edA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSU5NSVCNyVFNSVCQSU5QSVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpJUl8zWG51blFqUVJTQWpSSUlUb1M1SSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMzAzNDElMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuMzg5NzI0OCU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E7%BF%BB%E9%BA%B5turn-noodle-%E8%A5%BF%E9%96%80%E5%B3%A8%E7%9C%89%E5%BA%97/xdt0ZlT4UI6C-XT1A88g5Q?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVCQiVCQSVFNSU5QyU4QiVFNCVCOCVBRCVFNSVBRCVCOCVFNyVCNCU4NSVFNiVBOCU5MyUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUotZHB2YUtLcFFqUVJtSU5LLVpOQlJzWSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMzA5NjA1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUxMjI2MTklN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%97%A5%E5%BC%8F%E6%8B%89%E9%BA%B5-%E9%AE%AE%E6%9E%9C%E9%A3%B2/mbSoYYFUWcCOKJsckGPOBQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNyU5RiVCMyVFNyVBMiU4NyVFOSVBQiU5OCVFNCVCOCVBRCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpnYWRqYnRsVVhUUVJ3cWhHLWR3MHQ2RSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMTIwOTYlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNjQzMzg2JTdE",
"https://www.ubereats.com/tw/store/%E6%AE%B5%E7%B4%94%E8%B2%9E-%E5%85%A7%E6%B9%96%E7%91%9E%E5%85%89%E5%BA%97/vGBk_8pcSmOr_zZXDgP0tg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVCRSVCNyVFNiU5OCU4RSVFOCVCMiVBMSVFNyVCNiU5MyVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp3V2l6MEd1c1FqUVJkbTJscl9ua2lQbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wODY1NTA5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU2NTQ5MjMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%8F%B0%E7%81%A3%E7%9C%9F%E6%9C%89%E5%91%B3%E9%B9%BD%E9%85%A5%E9%9B%9E-%E5%8C%97%E6%8A%95/rCnuLUEJWbartwmN2qSlrQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVCRSVBOSVFOCU4OCU4OCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpoMDI5bWtpdVFqUVIwM3pXbXBKUFpVdyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4xNDMxNDE1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUwMjI2NDMlN0Q%3D",
"https://www.ubereats.com/tw/store/2%E6%B4%BE%E5%85%8B%E9%9B%9E%E6%8E%92-%E6%B0%B8%E5%90%89%E5%BA%97/9C-QOpLSQruAcqK--zjn6g?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiVCMCVCOCVFNiU5OCVBNSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpYWUJvdjZpclFqUVJsMGlmUEwtZVl2RSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wMzM0Njk3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU3ODg0MTclN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%8F%B0%E5%AE%A2%E9%BA%BB%E8%BE%A3%E7%87%99-%E5%8D%97%E6%B8%AF%E5%BA%97/FnIWhctDWQSKhRdKX-EEmw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSU4RCU5NyVFNiVCOCVBRiVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpyeHVvUjJXclFqUVJ2ZzViU1cwUkY1WSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNTIyMzA4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU5NDQwNzklN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%A4%A7%E8%B3%9E%E5%B9%B3%E5%83%B9%E9%89%84%E6%9D%BF%E7%87%92-%E4%B8%89%E9%87%8D%E5%BA%97/Zpp4UcSXXDy48aB8uuaUcg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVBMyVBQiVFNiU5RSU5NyVFOSVBQiU5OCVFNyVCNCU5QSVFNSU5NSU4NiVFNiVBNSVBRCVFOCU4MSVCNyVFNiVBNSVBRCVFNSVBRCVCOCVFNiVBMCVBMSUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUplV0dWNnJpdVFqUVJ2czJQcDlGeHlodyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wOTQzMTk4JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUxNjM0ODMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%B0%8F%E5%8D%97%E7%B1%B3%E7%B3%95-%E5%AE%89%E4%B8%AD%E5%BA%97/kNR19uIyTXGkpNZFmt2CcQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4RCU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSU5QyU5RiVFNSU5RiU4RSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpyMnlXSHczWWJUUVJOWFlqMjZiVDJqTSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMy4wNTc0NjAzJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjE1MDU3NDQlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%99%BE%E5%91%B3%E7%81%AB%E9%9B%9E%E8%82%89%E9%A3%AF-%E7%B8%BD%E5%BA%97/9X3J0EvVWJGidljQAD-ygQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5NiVCMCVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5RSU5NyVFNSU4RiVBMyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpGMmt1cS1hbVFqUVI3VF91NzRoYnhYOCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNzM1NDc1OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMS4zODEwNjE4JTdE",
"https://www.ubereats.com/tw/store/%E4%BA%94%E8%8A%B1%E9%A6%AC%E6%B0%B4%E9%A4%83-%E5%AE%9C%E8%98%AD%E5%AE%9C%E8%88%88%E5%BA%97/vIXV63ESQZuSH4I3_ZQeIg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNSVBRSU5QyVFOCU5OCVBRCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpsMXZlQnNEa1p6UVJsUWRSTzFpT2tBbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC43NTE0MjQlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjEuNzQxNzIwMyU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E5%B0%8F%E8%B1%AC%E5%BE%88%E5%BF%99-%E5%A4%A7%E5%9F%94%E5%BA%97/4O6iL7-_T8GBjVScIH7iZw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNSVCRCVCMCVFNSU4QyU5NiVFNSVBNSVCMyVFNSVBRCU5MCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUo1LWlueXBZNGFUUVJleWFrbThzSWlnMCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wODExNjklMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuNTQzNzM2JTdE",
"https://www.ubereats.com/tw/store/%E9%9A%94%E5%A3%81%E5%AE%B5%E5%A4%9C-%E6%96%B0%E5%8C%97%E6%97%97%E8%89%A6%E5%BA%97/aHYmJJhUVkuPVVCjrVHSGA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU4MSVBOSVFNCVCOCVCQiVFNSU4NSVBQyVFOSU4NiVBQiVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpiZWJvVlBvYmFEUVItT1FlNXhWTzB0MCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45MzgzNjU5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjM2Mjk5NzglN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%9A%96%E9%A3%9F%E5%A0%82/GbwLg_4sSFK9lRVU860tmw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU4RiVCMCVFNSU4RCU5NyVFNiU5NiVCMCVFNiVBOCU5MyVFOSU4NiVBQiVFOSU5OSVBMiUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpENmhkZkk5MmJqUVJoOVdyTl9pU08tRSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi45ODkxMzg3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjIxMzMzMjYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E4%B8%AD%E5%8E%9F%E5%A4%9C%E5%B8%82-%E7%99%BE%E5%96%84%E9%BA%BB%E8%BE%A3%E9%B4%A8%E8%A1%80%E8%87%AD%E8%B1%86%E8%85%90/k0PutOgqV-yxj_ozTX_ayg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNCVCOCVBRCVFNSU4RSU5RiVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpJZkNnUnhRaWFEUVJfN3k0QzJYU2hpcyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45NTczODI3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjI0MDc3NjQlN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%87%89%E8%A6%8B-%E5%A4%A7%E9%87%8C%E5%A1%97%E5%9F%8E%E7%B8%BD%E5%BA%97/WHLfO2ELVhaOxkwLZAvPnw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNiU5QyU5RCVFOSU5OSVCRCVFNyVBNyU5MSVFNiU4QSU4MCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpKODc0WDZva2FUUVJCYW5Lckd4SnlBYyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wNjg1NzE0JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjcxNDc1NzklN0Q%3D",
"https://www.ubereats.com/tw/store/%E9%AE%AE%E9%9B%9E%E5%91%B3%E9%B9%B9%E9%85%A5%E9%9B%9E/qYl0Y3W6SBWhheI_bzINpA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVBNCVBNyVFNSU5MCU4QyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUptWkctM0YtcFFqUVI2MlQ1MG1ab0hJbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNTUwMjE2OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMS41MzUyNzIzJTdE",
"https://www.ubereats.com/tw/store/%E9%BE%8D%E9%B9%BD%E9%85%A5%E9%9B%9E-%E5%8F%B0%E5%8C%97%E5%A4%A7%E5%90%8C%E5%BA%97/gXm0gDteXvSX7e2PRfqpug?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVBNCVBNyVFNSU5MCU4QyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUptWkctM0YtcFFqUVI2MlQ1MG1ab0hJbyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wNTUwMjE2OTk5OTk5OSUyQyUyMmxvbmdpdHVkZSUyMiUzQTEyMS41MzUyNzIzJTdE",
"https://www.ubereats.com/tw/store/%E5%A4%AF%E8%82%89%E5%85%88%E7%94%9F%E7%82%AD%E7%83%A4%E5%BA%97/LHZxJkFmWkCC9CWdQwQ_cw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSVBRiVBNiVFOCVCOCU5MCVFNSVBNCVBNyVFNSVBRCVCOCUyMCVFOCU4NyVCQSVFNSU4QyU5NyVFNiVBMCVBMSVFNSU4RCU4MCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpIYzluMmhxc1FqUVI1N1FxMHNnMC1oOCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4wODMwNzU5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU0NTIxNzUlN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%9D%BE%E6%AD%A3%E9%B9%BD%E9%85%A5%E9%9B%9E/hAikyFqLTTi1xkfi_t5-sw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSU5NSVCNyVFNiVBNiVBRSVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUp6V1RKRkd0emJqUVJJN3lTUWJzdEdwcyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi45MDY1NjgyJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjI3MzM4NDklN0Q%3D",
"https://www.ubereats.com/tw/store/%E4%BA%8C%E8%99%8E-%E6%9D%8E%E5%AE%B6%E9%B9%B9%E9%85%A5%E9%9B%9E/-qo39kGMUROWdL_bujw4MA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNyVBQiVCOSVFNSU4RCU5NyVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUo3UTZuN2lLemFUUVJFZkdDRk9zVXAzTSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC42ODQwOTMlMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuODc0NjYzJTdE",
"https://www.ubereats.com/tw/store/minid-%E8%97%8D%E7%94%B0%E5%BA%97/tWosd5wdXV-0rBfZj9iAfQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFOSVBQiU5OCVFOSU5QiU4NCVFNSVBNCVBNyVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpPOVZSU2hFUGJqUVI4bFgtci15QjV1WSUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi43MzMzODE0JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjI4NDU1NzIlN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%88%B0%E9%AC%A5%E9%9B%9E-%E6%B2%B9%E9%9B%9E-%E9%86%89%E9%9B%9E-%E8%BC%95%E9%A3%9F-%E9%AB%98%E9%9B%84%E5%85%89%E8%8F%AF%E5%BA%97/9nqgCcDGScaGdDBqIGxrjA?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOSVBQiU5OCVFNSVCOCVBQiVFNSVBNCVBNyVFNiVCNCVCQiVFNSU4QiU5NSVFNCVCOCVBRCVFNSVCRiU4MyUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpGNUdyZ3IwRWJqUVJQb2pBN21wMkdWYyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyMi42MjQ0NzYzJTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjMyMDgzNjUlN0Q%3D",
"https://www.ubereats.com/tw/store/%E6%88%B0%E9%AC%A5%E9%9B%9E-%E6%B2%B9%E9%9B%9E-%E9%86%89%E9%9B%9E-%E8%BC%95%E9%A3%9F-%E5%BD%B0%E5%8C%96%E6%B0%91%E6%97%8F%E5%BA%97/tT9aV1dMV5OHpApJLWVEVg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNSVCRCVCMCVFNSU4QyU5NiVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUotZmhXSWZNNGFUUVJlZy1TRGZYbDV2ZyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wNzE1MzclMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuNTUwNjAyNSU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E9%9B%9E%E7%8E%8B%E8%B1%86%E4%B9%B3%E9%9B%9E-%E5%A4%A7%E5%9F%94%E5%BA%97/qWC7amHASTycScK_CfOyLw?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFNSU5QyU4QiVFNyVBQiU4QiVFNSVCRCVCMCVFNSU4QyU5NiVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUotZmhXSWZNNGFUUVJlZy1TRGZYbDV2ZyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4wNzE1MzclMkMlMjJsb25naXR1ZGUlMjIlM0ExMjAuNTUwNjAyNSU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E4%B8%89%E9%A1%A7%E8%8C%85%E5%BB%AC-%E6%9C%A8%E6%9F%B5%E6%9C%A8%E6%96%B0%E5%BA%97/LYTkXj93Ttu0rzg-84Na6Q?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5OSVBRiVFNyVCRSU4RSVFNSVBNSVCMyVFNSVBRCU5MCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUotUW5aTHVFQmFEUVJiM3l2R0ZxQW00OCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45ODA3MjE3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU1NjA3MDYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E7%82%B8%E8%80%81%E5%A4%A7-%E6%96%B0%E5%BA%97%E5%8C%97%E6%96%B0%E5%BA%97/VMmSOt_xT_6JoQjJo6vAog?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNiU5OSVBRiVFNyVCRSU4RSVFNSVBNSVCMyVFNSVBRCU5MCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUotUW5aTHVFQmFEUVJiM3l2R0ZxQW00OCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC45ODA3MjE3JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjU1NjA3MDYlN0Q%3D",
"https://www.ubereats.com/tw/store/%E5%8F%B0%E4%B8%AD%E8%82%89%E5%9C%93-%E6%9D%B1%E5%B1%B1%E5%BA%97/gLDLoRX8XVS3BgMcTezI3A?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNCVCOCVBRCVFNSVCOCU4MiVFNyVBNyU4MSVFNyVBQiU4QiVFNiU5NiVCMCVFNiVCMCU5MSVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpFY2NOTFdFOWFUUVJqM1JRdTcxMFJvNCUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNC4xNTg2OTI5JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIwLjY4NTkwNiU3RA%3D%3D",
"https://www.ubereats.com/tw/store/%E4%BD%95%E5%AE%B6%E9%B9%BD%E9%85%A5%E9%9B%9E/Fdf0qVYDT1K9suagqufiJQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVCRSVBOSVFOCU4OCU4OCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpoMDI5bWtpdVFqUVIwM3pXbXBKUFpVdyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4xNDMxNDE1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUwMjI2NDMlN0Q%3D",
"https://www.ubereats.com/tw/store/%E8%83%A1%E5%AE%B6%E7%A2%B3%E7%83%A4/Ayy0omqwTgijxRvh16JAJg?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMiVFOCU4NyVCQSVFNSU4QyU5NyVFNSVCOCU4MiVFNyVBQiU4QiVFNSVCRSVBOSVFOCU4OCU4OCVFOSVBQiU5OCVFNyVCNCU5QSVFNCVCOCVBRCVFNSVBRCVCOCUyMiUyQyUyMnJlZmVyZW5jZSUyMiUzQSUyMkNoSUpoMDI5bWtpdVFqUVIwM3pXbXBKUFpVdyUyMiUyQyUyMnJlZmVyZW5jZVR5cGUlMjIlM0ElMjJnb29nbGVfcGxhY2VzJTIyJTJDJTIybGF0aXR1ZGUlMjIlM0EyNS4xNDMxNDE1JTJDJTIybG9uZ2l0dWRlJTIyJTNBMTIxLjUwMjI2NDMlN0Q%3D"
    };

            // 創建一個隨機數生成器
            Random random = new Random();

            // 根據陣列的長度隨機選擇一個索引
            int randomIndex = random.Next(addresses.Length);

            // 根據隨機索引返回對應的位址
            return addresses[randomIndex];
        }
        public string 隨機Useragent電腦系統()
        {
            // 將您的地址放入一個字串陣列中
            string[] addresses = {
"Mac OS X",
"Windows NT",
"Ubuntu",
"ALTLinux",
"MidnightBSD",
"NetBSD",
"FreeBSD",
"OpenBSD",
"SunOS",
"WebOS",
"hpwOS",
"DirectFB",
"Microsoft Windows",
"Windows CE",
"Haiku"
    };

            // 創建一個隨機數生成器
            Random random = new Random();

            // 根據陣列的長度隨機選擇一個索引
            int randomIndex = random.Next(addresses.Length);

            // 根據隨機索引返回對應的位址
            return addresses[randomIndex];
        }
        private void dataGridView2_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                // 檢查是否單擊了“推薦碼”列
                if (e.ColumnIndex == dataGridView2.Columns["推薦碼"].Index && e.RowIndex >= 0)
                {
                    // 從單元格獲取內容並將其複製到剪貼板
                    var cellValue = dataGridView2.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
                    if (cellValue != null)
                    {
                        string contentToCopy = cellValue.ToString();
                        Clipboard.SetText(contentToCopy);
                    }
                }
            }
            catch { }
        }

        static SheetsService InitializeSheetsService()
        {
            string[] Scopes = { SheetsService.Scope.Spreadsheets };
            //應用程式的名字需要英文
            string ApplicationName = "AutoRegisterUber";

            //事先在程式內封裝寫入Google api金鑰，避免再額外生成json檔案
            MemoryStream stream = new MemoryStream();
            StreamWriter writer = new StreamWriter(stream);
            writer.Write(@"{""installed"":{""client_id"":""789169134176-mtoo9vaqdvsrkgufc9tdc5jtq7eghgi1.apps.googleusercontent.com"",""project_id"":""friendly-bazaar-293201"",""auth_uri"":""https://accounts.google.com/o/oauth2/auth"",""token_uri"":""https://oauth2.googleapis.com/token"",""auth_provider_x509_cert_url"":""https://www.googleapis.com/oauth2/v1/certs"",""client_secret"":""X1HNYhS4y09-j6bzuTdfqApB"",""redirect_uris"":[""urn:ietf:wg:oauth:2.0:oob"",""http://localhost""]}}");
            writer.Flush();
            stream.Position = 0;

            //事先在程式內封裝寫入Google api金鑰，避免再額外生成json檔案
            string File1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\sheets.googleapis.com-dotnet-quickstart.json");
            string File2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\sheets.googleapis.com-dotnet-quickstart.json\\Google.Apis.Auth.OAuth2.Responses.TokenResponse-user");
            if (!Directory.Exists(File1))
            {
                Directory.CreateDirectory(File1);
            }
            if (!File.Exists(File2))
            {
                File.Create(File2).Close();
            }
            //事先在程式內封裝寫入Google api金鑰，避免再額外生成json檔案
            StreamWriter sw = new StreamWriter(File2, false, Encoding.Default);
            sw.WriteLine(@"{""access_token"":""ya29.a0AfH6SMD2CbI5GZGUCNPLImxRh8jH0SHk41fF5wLR8jsLWGZdKns6klPw5DhJURy1VGLQU4GBGYKxBFyvObxA61RgMTV-RFE-trMXJmKTOytrYg0IY3_JsKW_DnWLwGGz9OqVBWcScIxQk3i-N56mqCl4CJsDoYOWpTQ"",""token_type"":""Bearer"",""expires_in"":3599,""refresh_token"":""1//0ecStQJy_42cZCgYIARAAGA4SNwF-L9Ir5iqdCVOIve6UqoNP_R7vpWyzrYvZ_jhpTuZu3wq3wSqQ07aJoBvAGzg22YPM-AuQ8eM"",""scope"":""https://www.googleapis.com/auth/spreadsheets"",""Issued"":""2020-10-21T11:46:01.468+08:00"",""IssuedUtc"":""2020-10-21T03:46:01.468Z""}");
            sw.Close();

            UserCredential credential = GoogleWebAuthorizationBroker.AuthorizeAsync(GoogleClientSecrets.FromStream((stream)).Secrets, Scopes, "user", CancellationToken.None, new FileDataStore(File1, false)).Result;

            return new SheetsService(new Google.Apis.Services.BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = ApplicationName,
            });
        }//調用所有Google Sheet應該有的參數
        static IList<IList<object>> GetSheetData(SheetsService sheetsService, string spreadsheetId, int 最大接收數量)
        {
            try
            {
                // 讀取 Google Sheet 中的數據
                var range = $"工作表1!A1:C{最大接收數量}";
                var request = sheetsService.Spreadsheets.Values.Get(spreadsheetId, range);
                var response = request.Execute();

                return response.Values;
            }
            catch (Exception)
            {
                return null;
            }
        }

        static void DeleteSheetData(SheetsService sheetsService, string spreadsheetId, IList<IList<object>> data, string target)
        {
            try
            {
                // 搜尋符合的行
                int deleteRowIndex = -1;
                for (int i = 0; i < data.Count; i++)
                {
                    var row = data[i];
                    if (row.Count < 1) // 如果該行數據沒有 A 欄，跳過該行的判斷
                    {
                        continue;
                    }
                    if (row.Count < 2) // 如果該行數據只有 A 欄，直接比對 A 欄是否有符合的數據
                    {
                        if ((string)row[0] == target)
                        {
                            deleteRowIndex = i + 1;
                            break;
                        }
                    }
                    else // 如果該行數據有 A、B 欄，比對 A 或 B 欄是否有符合的數據
                    {
                        if ((string)row[0] == target || (string)row[1] == target)
                        {
                            deleteRowIndex = i + 1;
                            break;
                        }
                    }
                }

                // 如果有找到，就刪除這一行
                if (deleteRowIndex != -1)
                {
                    var requestBody = new BatchUpdateSpreadsheetRequest
                    {
                        Requests = new List<Google.Apis.Sheets.v4.Data.Request>
            {
                new Google.Apis.Sheets.v4.Data.Request
                {
                    DeleteDimension = new DeleteDimensionRequest
                    {
                        Range = new DimensionRange
                        {
                            SheetId = 0,
                            Dimension = "ROWS",
                            StartIndex = deleteRowIndex - 1,
                            EndIndex = deleteRowIndex
                        }
                    }
                }
            }
                    };
                    var batchUpdateRequest = sheetsService.Spreadsheets.BatchUpdate(requestBody, spreadsheetId);
                    batchUpdateRequest.Execute();
                }
            }
            catch { }
        }

        private void dataGridView2_DataError(object sender, DataGridViewDataErrorEventArgs e)//取消datagridview驗證格式
        {
            try
            {
                dataGridView2.CausesValidation = false;//取消驗證格式
            }
            catch { }
        }
        private static byte[] Encrypt(byte[] plainBytes)
        {
            byte[] key = new byte[32] { 23, 54, 92, 76, 176, 3, 198, 15, 67, 28, 189, 200, 74, 88, 173, 54, 23, 85, 123, 198, 9, 42, 68, 111, 36, 17, 195, 13, 39, 22, 180, 98 };
            byte[] iv = new byte[16] { 35, 67, 98, 99, 120, 7, 42, 89, 16, 243, 67, 18, 77, 3, 96, 26 };

            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(plainBytes, 0, plainBytes.Length);
                    }
                    return memoryStream.ToArray();
                }
            }
        }
        private static byte[] Decrypt(byte[] encryptedBytes)
        {
            byte[] key = new byte[32] { 23, 54, 92, 76, 176, 3, 198, 15, 67, 28, 189, 200, 74, 88, 173, 54, 23, 85, 123, 198, 9, 42, 68, 111, 36, 17, 195, 13, 39, 22, 180, 98 };
            byte[] iv = new byte[16] { 35, 67, 98, 99, 120, 7, 42, 89, 16, 243, 67, 18, 77, 3, 96, 26 };

            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.IV = iv;
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(encryptedBytes, 0, encryptedBytes.Length);
                    }
                    return memoryStream.ToArray();
                }
            }
        }
        public void 保存用戶設置到XML(List<ComboBox> 要保存的ComboBox列表, List<CheckBox> 要保存的CheckBox列表, List<RichTextBox> 要保存的RichTextBox列表, DataGridView 要保存的DataGridView, string 檔案路徑)
        {
            try
            {
                XmlDocument xmlDoc = new XmlDocument();
                XmlElement root = xmlDoc.CreateElement("用戶設置");
                xmlDoc.AppendChild(root);

                int comboBoxIndex = 0;
                foreach (ComboBox comboBox in 要保存的ComboBox列表)
                {
                    XmlElement comboBoxElement = xmlDoc.CreateElement($"ComboBox{comboBoxIndex}");
                    root.AppendChild(comboBoxElement);

                    XmlElement itemsElement = xmlDoc.CreateElement("項目");
                    comboBoxElement.AppendChild(itemsElement);

                    foreach (string item in comboBox.Items)
                    {
                        XmlElement itemElement = xmlDoc.CreateElement("項目");
                        itemElement.InnerText = item;
                        itemsElement.AppendChild(itemElement);
                    }

                    XmlElement selectedIndexElement = xmlDoc.CreateElement("選擇項目內容");
                    selectedIndexElement.InnerText = comboBox.SelectedItem?.ToString() ?? "";
                    comboBoxElement.AppendChild(selectedIndexElement);

                    comboBoxIndex++;
                }

                int checkBoxIndex = 0;
                foreach (CheckBox checkBox in 要保存的CheckBox列表)
                {
                    XmlElement checkBoxElement = xmlDoc.CreateElement($"CheckBox{checkBoxIndex}");
                    checkBoxElement.InnerText = checkBox.Checked.ToString();
                    root.AppendChild(checkBoxElement);

                    checkBoxIndex++;
                }

                int richTextBoxIndex = 0;
                foreach (RichTextBox richTextBox in 要保存的RichTextBox列表)
                {
                    XmlElement richTextBoxElement = xmlDoc.CreateElement($"RichTextBox{richTextBoxIndex}");
                    richTextBoxElement.InnerText = richTextBox.Text;
                    root.AppendChild(richTextBoxElement);

                    richTextBoxIndex++;
                }

                // 保存 DataGridView
                XmlElement dataGridViewElement = xmlDoc.CreateElement("DataGridView");
                root.AppendChild(dataGridViewElement);

                XmlElement rowsElement = xmlDoc.CreateElement("Rows");
                dataGridViewElement.AppendChild(rowsElement);

                foreach (DataGridViewRow row in 要保存的DataGridView.Rows)
                {
                    if (!row.IsNewRow)
                    {
                        XmlElement rowElement = xmlDoc.CreateElement("Row");
                        rowsElement.AppendChild(rowElement);

                        for (int i = 0; i < 要保存的DataGridView.ColumnCount; i++)
                        {
                            if (!(要保存的DataGridView.Columns[i] is DataGridViewButtonColumn))
                            {
                                XmlElement cellElement = xmlDoc.CreateElement($"Cell{i}");
                                cellElement.InnerText = row.Cells[i].Value?.ToString() ?? "";
                                rowElement.AppendChild(cellElement);
                            }
                        }
                    }
                }

                //xmlDoc.Save(文件路徑);
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    xmlDoc.Save(memoryStream);
                    byte[] plainBytes = memoryStream.ToArray();
                    byte[] encryptedBytes = Encrypt(plainBytes); // 進行加密
                    File.WriteAllBytes(檔案路徑, encryptedBytes);
                }
            }
            catch { }
        }

        public void 讀取用戶設置從XML(List<ComboBox> 要讀取的ComboBox列表, List<CheckBox> 要讀取的CheckBox列表, List<RichTextBox> 要讀取的RichTextBox列表, DataGridView 要讀取的DataGridView, string 文件路徑)
        {
            try
            {
                byte[] encryptedBytes = File.ReadAllBytes(文件路徑);
                byte[] decryptedBytes = Decrypt(encryptedBytes); // 進行解密

                XmlDocument xmlDoc = new XmlDocument();
                using (MemoryStream memoryStream = new MemoryStream(decryptedBytes))
                {
                    xmlDoc.Load(memoryStream);
                }

                XmlElement root = xmlDoc.DocumentElement;

                int comboBoxIndex = 0;
                foreach (ComboBox comboBox in 要讀取的ComboBox列表)
                {
                    XmlNode comboBoxNode = root.SelectSingleNode($"ComboBox{comboBoxIndex}");

                    XmlNode itemsNode = comboBoxNode.SelectSingleNode("項目");
                    comboBox.Items.Clear();
                    foreach (XmlNode itemNode in itemsNode.ChildNodes)
                    {
                        comboBox.Items.Add(itemNode.InnerText);
                    }

                    XmlNode selectedIndexNode = comboBoxNode.SelectSingleNode("選擇項目內容");
                    string selectedItem = selectedIndexNode.InnerText;
                    if (!string.IsNullOrEmpty(selectedItem))
                    {
                        int selectedIndex = comboBox.FindStringExact(selectedItem);
                        comboBox.SelectedIndex = selectedIndex;
                    }

                    comboBoxIndex++;
                }

                int checkBoxIndex = 0;
                foreach (CheckBox checkBox in 要讀取的CheckBox列表)
                {
                    XmlNode checkBoxNode = root.SelectSingleNode($"CheckBox{checkBoxIndex}");
                    checkBox.Checked = bool.Parse(checkBoxNode.InnerText);

                    checkBoxIndex++;
                }

                int richTextBoxIndex = 0;
                foreach (RichTextBox richTextBox in 要讀取的RichTextBox列表)
                {
                    XmlNode richTextBoxNode = root.SelectSingleNode($"RichTextBox{richTextBoxIndex}");
                    richTextBox.Text = richTextBoxNode.InnerText;

                    richTextBoxIndex++;
                }

                // 讀取 DataGridView
                XmlNode dataGridViewNode = root.SelectSingleNode("DataGridView");
                XmlNode rowsNode = dataGridViewNode.SelectSingleNode("Rows");

                要讀取的DataGridView.Rows.Clear();
                foreach (XmlNode rowNode in rowsNode.ChildNodes)
                {
                    DataGridViewRow newRow = new DataGridViewRow();
                    newRow.CreateCells(要讀取的DataGridView);

                    for (int i = 0; i < 要讀取的DataGridView.ColumnCount; i++)
                    {
                        if (!(要讀取的DataGridView.Columns[i] is DataGridViewButtonColumn))
                        {
                            XmlNode cellNode = rowNode.SelectSingleNode($"Cell{i}");
                            newRow.Cells[i].Value = cellNode.InnerText;
                        }
                        else
                        {
                            // 為 DataGridViewButtonColumn 設置按鈕文本
                            string columnTitle = 要讀取的DataGridView.Columns[i].HeaderText;
                            switch (columnTitle)
                            {
                                case "註冊":
                                    newRow.Cells[i].Value = "註冊";
                                    newRow.DefaultCellStyle.SelectionBackColor = Color.LightGray;
                                    newRow.DefaultCellStyle.SelectionForeColor = Color.Black;
                                    break;
                                case "啟動":
                                    newRow.Cells[i].Value = "啟動";
                                    break;
                            }
                        }
                    }

                    要讀取的DataGridView.Rows.Add(newRow);
                }
            }
            catch { }
        }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                string filePath = "UserSettings.xml";
                List<ComboBox> comboBoxesToSave = new List<ComboBox> { 預設暱稱Combobox, 預設地址Combobox, 預設備註Combobox, 預設網址Combobox, 預設店家網址Combobox };
                List<CheckBox> checkBoxesToSave = new List<CheckBox> { 改成後台運行, 修改預設備註Checkbox, 修改成放門口Checkbox, 新增現金付款Checkbox, 輸入優惠碼Checkbox, 最上層Checkbox, form4.使用自定義Gmail信箱Checkbox, 獲取推薦碼Checkbox, 新增信用卡Checkbox, 加入購物車Checkbox, 自動下單Checkbox, 秘密用Checkbox, 隨機地址checkbox };

                List<RichTextBox> richTextBoxList = new List<RichTextBox>
                   {
   form4.form4信箱輸入框richtextbox,
   form4.form4信箱註冊次數顯示richtextbox,
    加入購物車richTextBox,
    推薦碼輸入框richTextBox
};
                保存用戶設置到XML(comboBoxesToSave, checkBoxesToSave, richTextBoxList, dataGridView2, filePath);

                foreach (DataGridViewRow row in dataGridView2.Rows) //將所有Port欄位的數據清空
                {
                    row.Cells["Port"].Value = null;
                }
            }
            catch { }
        }
        public void RunCmd(string command) //無return的版本
        {
            try
            {
                System.Diagnostics.Process p = new System.Diagnostics.Process();
                p.StartInfo.FileName = "cmd.exe";
                p.StartInfo.UseShellExecute = false;     // 是否使用操作系統shell啟動 
                p.StartInfo.RedirectStandardInput = true; // 接受來自調用程式的輸入資訊 
                                                          //p.StartInfo.RedirectStandardOutput = true; // 由調用程式獲取輸出資訊 
                p.StartInfo.RedirectStandardError = true; // 重定向標準錯誤輸出 
                p.StartInfo.CreateNoWindow = true; // 不顯示程式視窗
                p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                p.StartInfo.Arguments = "";
                p.Start(); // 啟動程式

                // 向cmd視窗發送輸入資訊 
                p.StandardInput.WriteLine(command);
                p.StandardInput.WriteLine("exit");
                p.StandardInput.AutoFlush = true;
                p.WaitForExit(); // 等待程式執行完退出進程
                                 //MessageBox.Show(p.StandardOutput.ReadToEnd());
                p.Close();
            }
            catch { }
        }
        private void button1_Click(object sender, EventArgs e)
        {
            Task.Run(() =>
            {
                是否中斷所有while = true;
                // 取得所有正在運行的進程
                var processes = Process.GetProcesses();
                // 遍歷每個進程
                foreach (var process in processes)
                {
                    // 如果進程名以 "chromedriver" 開頭
                    if (process.ProcessName.StartsWith("chromedriver"))
                    {
                        // 強制關閉該進程
                        process.Kill();
                    }
                }
                RunCmd("taskkill /f /im conhost.exe");
                var query = new SelectQuery("SELECT CommandLine, ProcessId FROM Win32_Process WHERE Name='chrome.exe' and CommandLine like '%remote-debugging-port=%' and not CommandLine like '%type=renderer%'");
                var searcher = new ManagementObjectSearcher(query);
                var commandLinesAndProcessIds = searcher.Get().Cast<ManagementObject>().Select(p => new { CommandLine = p["CommandLine"].ToString(), ProcessId = (uint)p["ProcessId"] }).ToList();

                foreach (var item in commandLinesAndProcessIds)
                {
                    var userDataDirMatch = Regex.Match(item.CommandLine, @"--user-data-dir=(.+?)(\s|$)");
                    var portMatch = Regex.Match(item.CommandLine, @"--remote-debugging-port=(\d+)");

                    if (userDataDirMatch.Success)
                    {
                        // MessageBox.Show(item.CommandLine);
                        var userDataDir = userDataDirMatch.Groups[1].Value;
                        var port = int.Parse(portMatch.Groups[1].Value);
                        var processId = item.ProcessId;

                        // 結束進程
                        RunCmd($@"taskkill /f /pid {processId}");
                    }
                }
                是否中斷所有while = false;
            }).ConfigureAwait(false);
        }
        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                // 檢查值是否超過最大值
                if (numericUpDown1.Value > 10)
                {
                    // 超過最大值，將值設置為最大值
                    numericUpDown1.Value = 10;
                }
            }
            catch { }
        }

        private void numericUpDown1_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
                {
                    e.Handled = true;
                }

                if (e.KeyChar == '0')
                {
                    e.Handled = true;
                }

                if (numericUpDown1.Value >= 10)
                {
                    e.Handled = true;
                }
            }
            catch { }
        }
        private void 預設暱稱Combobox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)System.Windows.Forms.Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(預設暱稱Combobox.Text))
                    {
                        if (!預設暱稱Combobox.Items.Contains(預設暱稱Combobox.Text))
                        {
                            預設暱稱Combobox.Items.Add(預設暱稱Combobox.Text);
                            預設暱稱Combobox.DroppedDown = true;
                            預設暱稱Combobox.DroppedDown = false;
                        }
                    }
                }
            }
            catch { }
        }
        private void 預設暱稱Combobox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(預設暱稱Combobox.Text))
                {
                    if (!預設暱稱Combobox.Items.Contains(預設暱稱Combobox.Text))
                    {
                        預設暱稱Combobox.Items.Add(預設暱稱Combobox.Text);
                        預設暱稱Combobox.DroppedDown = true;
                        預設暱稱Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }
        private void 預設暱稱Combobox_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    int selectedIndex = 預設暱稱Combobox.SelectedIndex;
                    if (selectedIndex != -1)
                    {
                        預設暱稱Combobox.Items.RemoveAt(selectedIndex);
                        預設暱稱Combobox.DroppedDown = true;
                        預設暱稱Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }

        private void 預設地址Combobox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(預設地址Combobox.Text))
                {
                    if (!預設地址Combobox.Items.Contains(預設地址Combobox.Text))
                    {
                        預設地址Combobox.Items.Add(預設地址Combobox.Text);
                        預設地址Combobox.DroppedDown = true;
                        預設地址Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }
        private void 預設地址Combobox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)System.Windows.Forms.Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(預設地址Combobox.Text))
                    {
                        if (!預設地址Combobox.Items.Contains(預設地址Combobox.Text))
                        {
                            預設地址Combobox.Items.Add(預設地址Combobox.Text);
                            預設地址Combobox.DroppedDown = true;
                            預設地址Combobox.DroppedDown = false;
                        }
                    }
                }
            }
            catch { }
        }
        private void 預設地址Combobox_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    int selectedIndex = 預設地址Combobox.SelectedIndex;
                    if (selectedIndex != -1)
                    {
                        預設地址Combobox.Items.RemoveAt(selectedIndex);
                        預設地址Combobox.DroppedDown = true;
                        預設地址Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }

        private void 預設備註Combobox_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    int selectedIndex = 預設備註Combobox.SelectedIndex;
                    if (selectedIndex != -1)
                    {
                        預設備註Combobox.Items.RemoveAt(selectedIndex);
                        預設備註Combobox.DroppedDown = true;
                        預設備註Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }

        private void 預設備註Combobox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)System.Windows.Forms.Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(預設備註Combobox.Text))
                    {
                        if (!預設備註Combobox.Items.Contains(預設備註Combobox.Text))
                        {
                            預設備註Combobox.Items.Add(預設備註Combobox.Text);
                            預設備註Combobox.DroppedDown = true;
                            預設備註Combobox.DroppedDown = false;
                        }
                    }
                }
            }
            catch { }
        }

        private void 預設備註Combobox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(預設備註Combobox.Text))
                {
                    if (!預設備註Combobox.Items.Contains(預設備註Combobox.Text))
                    {
                        預設備註Combobox.Items.Add(預設備註Combobox.Text);
                        預設備註Combobox.DroppedDown = true;
                        預設備註Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }
        private void 預設網址Combobox_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    int selectedIndex = 預設網址Combobox.SelectedIndex;
                    if (selectedIndex != -1)
                    {
                        預設網址Combobox.Items.RemoveAt(selectedIndex);
                        預設網址Combobox.DroppedDown = true;
                        預設網址Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }

        private void 預設網址Combobox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)System.Windows.Forms.Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(預設網址Combobox.Text))
                    {
                        if (!預設網址Combobox.Items.Contains(預設網址Combobox.Text))
                        {
                            預設網址Combobox.Items.Add(預設網址Combobox.Text);
                            預設網址Combobox.DroppedDown = true;
                            預設網址Combobox.DroppedDown = false;
                        }
                    }
                }
            }
            catch { }
        }

        private void 預設網址Combobox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(預設網址Combobox.Text))
                {
                    if (!預設網址Combobox.Items.Contains(預設網址Combobox.Text))
                    {
                        預設網址Combobox.Items.Add(預設網址Combobox.Text);
                        預設網址Combobox.DroppedDown = true;
                        預設網址Combobox.DroppedDown = false;
                    }
                }
            }
            catch
            { }
        }

        private void 預設店家網址Combobox_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    int selectedIndex = 預設店家網址Combobox.SelectedIndex;
                    if (selectedIndex != -1)
                    {
                        預設店家網址Combobox.Items.RemoveAt(selectedIndex);
                        預設店家網址Combobox.DroppedDown = true;
                        預設店家網址Combobox.DroppedDown = false;
                    }
                }
            }
            catch { }
        }

        private void 預設店家網址Combobox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)System.Windows.Forms.Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(預設店家網址Combobox.Text))
                    {
                        if (!預設店家網址Combobox.Items.Contains(預設店家網址Combobox.Text))
                        {
                            預設店家網址Combobox.Items.Add(預設店家網址Combobox.Text);
                            預設店家網址Combobox.DroppedDown = true;
                            預設店家網址Combobox.DroppedDown = false;
                        }
                    }
                }
            }
            catch { }
        }

        private void 預設店家網址Combobox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(預設店家網址Combobox.Text))
                {
                    if (!預設店家網址Combobox.Items.Contains(預設店家網址Combobox.Text))
                    {
                        預設店家網址Combobox.Items.Add(預設店家網址Combobox.Text);
                        預設店家網址Combobox.DroppedDown = true;
                        預設店家網址Combobox.DroppedDown = false;
                    }
                }
            }
            catch
            { }
        }
        private void 設定到餐提醒按鈕_Click(object sender, EventArgs e)
        {
            try
            {
                form3.StartPosition = FormStartPosition.Manual;
                form3.Location = 設定到餐提醒按鈕.PointToScreen(new System.Drawing.Point(-form3.Width, 設定到餐提醒按鈕.Height));
                form3.TopMost = true;
                form3.Show();
            }
            catch { }
        }
        private async void PlayMp3()//播放音檔
        {
            try
            {
                if (form3.checkBox2.Checked)
                {
                    if (string.IsNullOrEmpty(form3.textBox1.Text))
                    {
                        MessageBox.Show("請先選擇鈴聲檔案");
                        return;
                    }
                    try
                    {
                        WaveFileReader reader = new WaveFileReader(form3.textBox1.Text);
                        WaveOut wout = new WaveOut();
                        wout.Init(reader);             // 通過 IWaveProvider 為音訊輸出初始化
                        wout.Play();
                    }
                    catch (FileNotFoundException)
                    {
                        MessageBox.Show("找不到播放檔案");
                    }
                    catch (Exception)
                    {
                        using (var mp3Reader = new Mp3FileReader(form3.textBox1.Text))
                        using (var waveOut = new WaveOutEvent())
                        {
                            waveOut.Init(mp3Reader);
                            waveOut.Play();

                            // 等待音訊播放完畢
                            while (waveOut.PlaybackState == PlaybackState.Playing)
                            {
                                await Task.Delay(100);
                            }
                        }
                    }
                }
                else
                {
                    // 使用內置的音頻
                    Assembly assembly = Assembly.GetExecutingAssembly();
                    Stream audioStream = assembly.GetManifestResourceStream("外送自動註冊.您的餐點快到拉.mp3");
                    using (var mp3Reader = new Mp3FileReader(audioStream))
                    using (var waveOut = new WaveOutEvent())
                    {
                        waveOut.Init(mp3Reader);
                        waveOut.Play();

                        // 等待音訊播放完畢
                        while (waveOut.PlaybackState == PlaybackState.Playing)
                        {
                            await Task.Delay(100);
                        }
                    }
                }
            }
            catch { }
        }
        private void 最上層Checkbox_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (最上層Checkbox.Checked)
                {
                    this.TopMost = true;
                }
                else
                {
                    this.TopMost = false;
                }
            }
            catch { }
        }
        private void button3_Click(object sender, EventArgs e)
        {
            form4.StartPosition = FormStartPosition.Manual;
            form4.Location = dataGridView2.PointToScreen(new System.Drawing.Point(0, button3.Height));
            form4.TopMost = true;
            form4.Show();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            string ip = new WebClient().DownloadString("https://ipinfo.io/ip").Trim();

            WebClient client = new WebClient();
            string json = client.DownloadString($"http://ip-api.com/json/{ip}?fields=country");
            JObject jObject = JObject.Parse(json);

            string country = jObject["country"].ToString();
            MessageBox.Show($"實體外網IP地址:{ip}\n國家:{country}");
        }
        static void 自動生成Json和Js檔案Google擴充路徑()
        {
            try
            {
                string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ChromedriverFinger\";
                string manifestPath = folderPath + @"\manifest.json";
                string jsPath = folderPath + @"\background.js";

                // 檢查目錄是否存在，不存在則創建
                if (!Directory.Exists(folderPath))
                {
                    Directory.CreateDirectory(folderPath);
                }

                // 創建新的 manifest.json 檔並向其中寫入 json 內容
                string jsonContent = @"
{
  ""name"": ""WhileSwitchWebGL"",
  ""version"": ""1.0"",
  ""description"": ""WhileSwitchWebGL"",
  ""manifest_version"": 2,
  ""permissions"": [
    ""storage"",
    ""notifications"",
    ""privacy"",
    ""http://*/*"",
    ""https://*/*"",
    ""webNavigation"",
    ""webRequest"",
    ""webRequestBlocking"",
    ""tabs"",
    ""<all_urls>""
  ],
  ""background"": {
    ""scripts"": [""background.js""],
    ""persistent"": true
  },
  ""content_scripts"": [
    {
      ""matches"": [""<all_urls>""],
      ""js"": [""background.js""],
      ""run_at"": ""document_end""
    }
  ]
}";
                using (StreamWriter sw = new StreamWriter(manifestPath))
                {
                    sw.Write(jsonContent);
                }

                // 創建新的 script.js 檔並向其中寫入 jsCode 內容
                string jsCode = @"let script = document.createElement(""script"");
	script.textContent = ""("" + (function() {
		""use strict"";
		let debug = function (topOnly) {
			if (!topOnly || window === window.top) {
				// debugger;
			}
		};
		(function () {
			document.documentElement.dataset.fbscriptallow = true;
		})();
		let randomChange = function (n, m) {
			if (!m) {
				m = 0.1;
			}
			return Math.round(n + ((Math.random() - 0.5) * 2 * n * 0.3));
		};
		let setValue = function (object, propertyName, value, writable) {
			if (!writable) {
				writable = false;
			}
			Object.defineProperty(object, propertyName, {
				value: value,
				writable: writable,
				enumerable: true
			});
		};
		(function () { // Date
			window.Date.prototype.getDate					=	window.Date.prototype.getUTCDate					;
			window.Date.prototype.getDay					=	window.Date.prototype.getUTCDay						;
			window.Date.prototype.getFullYear				=	window.Date.prototype.getUTCFullYear				;
			window.Date.prototype.getHours					=	window.Date.prototype.getUTCHours					;
			window.Date.prototype.getMilliseconds			=	window.Date.prototype.getUTCMilliseconds			;
			window.Date.prototype.getMinutes				=	window.Date.prototype.getUTCMinutes					;
			window.Date.prototype.getMonth					=	window.Date.prototype.getUTCMonth					;
			window.Date.prototype.getSeconds				=	window.Date.prototype.getUTCSeconds					;
			window.Date.prototype.getTimezoneOffset			=	function () { return 0; }							;
			window.Date.prototype.getYear					=	function () { return this.getFullYear - 1900; }		;
			window.Date.prototype.setDate					=	window.Date.prototype.setUTCDate					;
			window.Date.prototype.setFullYear				=	window.Date.prototype.setUTCFullYear				;
			window.Date.prototype.setHours					=	window.Date.prototype.setUTCHours					;
			window.Date.prototype.setMilliseconds			=	window.Date.prototype.setUTCMilliseconds			;
			window.Date.prototype.setMinutes				=	window.Date.prototype.setUTCMinutes					;
			window.Date.prototype.setMonth					=	window.Date.prototype.setUTCMonth					;
			window.Date.prototype.setSeconds				=	window.Date.prototype.setUTCSeconds					;
			window.Date.prototype.setYear					=	function (n) { return this.setFullYear(n + 1900); }	;
			window.Date.prototype.toLocaleDateString		=	function () { return """"; }							;
			window.Date.prototype.toLocaleString			=	function () { return """"; }							;
			window.Date.prototype.toLocaleTimeString		=	function () { return """"; }							;
			window.Date.prototype.toString					=	function () { return """"; }							;
			window.Date.prototype.toTimeString				=	function () { return """"; }							;
		})();
		(function () { // navigator
			let a;
			let fakeNavigator = {};
		//	fakeNavigator.appCodeName						=
		//	fakeNavigator.appName							=
		//	fakeNavigator.appVersion						=
		//	fakeNavigator.platform							=
			fakeNavigator.product							=
			fakeNavigator.productSub						=
		//	fakeNavigator.userAgent							=
			fakeNavigator.vendor							=
			fakeNavigator.vendorSub							=
			a = """";
			fakeNavigator.deviceMemory						=
			fakeNavigator.hardwareConcurrency				=
			fakeNavigator.maxTouchPoints					=
			a = 0;
			fakeNavigator.bluetooth							=
			fakeNavigator.clipboard							=
			fakeNavigator.connection						=
		//	fakeNavigator.cookieEnabled						=
			fakeNavigator.credentials						=
			fakeNavigator.doNotTrack						=
			fakeNavigator.geolocation						=
			fakeNavigator.keyboard							=
			fakeNavigator.language							=
			fakeNavigator.locks								=
			fakeNavigator.mediaCapabilities					=
			fakeNavigator.mediaDevices						=
			fakeNavigator.mediaSession						=
		//	fakeNavigator.mimeTypes							=
			fakeNavigator.onLine							=
			fakeNavigator.permissions						=
			fakeNavigator.presentation						=
			fakeNavigator.scheduling						=
			fakeNavigator.serviceWorker						=
		//	fakeNavigator.storage							=
			fakeNavigator.usb								=null;
			fakeNavigator.userActivation					=
			fakeNavigator.userAgentData						=
			fakeNavigator.wakeLock							=
			fakeNavigator.webkitPersistentStorage			=
			fakeNavigator.webkitTemporaryStorage			=
			fakeNavigator.xr								=
			a = {};
			fakeNavigator.hardwareConcurrency = Math.floor(Math.random() * 8) + 1;
			fakeNavigator.deviceMemory = Math.floor(Math.random() * 4) + 1
		//	fakeNavigator.platform 							= ""Win32"";
			fakeNavigator.plugins							= [];
			setValue(fakeNavigator.plugins, ""item"",			function item() { return null; },		false);
			setValue(fakeNavigator.plugins, ""namedItem"",	function namedItem() { return null; },	false);
			setValue(fakeNavigator.plugins, ""refresh"",		function refresh() { return null; },	false);
			for (let i in window.navigator) {
				if (fakeNavigator[i] !== undefined) {
					try {
						Object.defineProperty(window.navigator, i, {
							get: function () {
								if (fakeNavigator[i] === ""undefined"") {
									return undefined;
								}
								return fakeNavigator[i];
							}
						});
					} catch (e) {}
				}
			}
		})();
		(function () { // Screen size
		let width = Math.floor(Math.random() * (1921 - 1366 + 1) + 1366);
		let height = Math.floor(Math.random() * (1081 - 768 + 1) + 768);
		let screenSize = [width, height];
		screen.availWidth && setValue(screen, ""availWidth"", screenSize[0]);
		screen.availHeight && setValue(screen, ""availHeight"", screenSize[1] - 40);
		screen.availLeft && setValue(screen, ""availLeft"", undefined, true);
		screen.availTop && setValue(screen, ""availTop"", undefined, true);
		screen.width && setValue(screen, ""width"", screenSize[0]);
		screen.height && setValue(screen, ""height"", screenSize[1]);
		screen.Brightness && setValue(screen, ""Brightness"", randomChange(screen.Brightness));
		screen.mozBrightness && setValue(screen, ""mozBrightness"", randomChange(screen.mozBrightness));
		screen.left && setValue(screen, ""left"", undefined, true);
		screen.top && setValue(screen, ""top"", undefined, true);
		screen.enabled && setValue(screen, ""enabled"", undefined);
		screen.mozEnabled && setValue(screen, ""mozEnabled"", undefined);
		screen.pixelDepth && setValue(screen, ""pixelDepth"", 32);
		screen.colorDepth && setValue(screen, ""colorDepth"", 32);
	})();

		(function () { // Debugger panel size
			let n = Math.round(71.5 + (Math.random() * 15)), wChanged = false, wValue, hChanged = false, hValue;
			Object.defineProperty(window, ""outerWidth"", {
				get: function () {
					if (!wChanged) {
						return window.innerWidth;
					}
					return wValue;
				},
				set: function (value) {
					wChanged = true;
					wValue = value;
				}
			});
			Object.defineProperty(window, ""outerHeight"", {
				get: function () {
					if (!hChanged) {
						return window.innerHeight + n;
					}
					return hValue;
				},
				set: function (value) {
					hChanged = true;
					hValue = value;
				}
			});
		})();
		(function () { // AudioContext
			let origGetFloatFrequencyData = window.AnalyserNode.prototype.getFloatFrequencyData;
			window.AnalyserNode.prototype.getFloatFrequencyData = function getFloatFrequencyData(array) {
				let ret = origGetFloatFrequencyData.apply(this, arguments);
				for (let i = 0; i < array.length; i++) {
					array[i] = array[i] + Math.random() * 0.2;
				}
				return ret;
			};
			window.AnalyserNode.prototype.getFloatFrequencyData.toString = origGetFloatFrequencyData.toString.bind(origGetFloatFrequencyData);
			let origGetChannelData = window.AudioBuffer.prototype.getChannelData;
			window.AudioBuffer.prototype.getChannelData = function getChannelData() {
				let ret = origGetChannelData.apply(this, arguments);
				for (let i = 0; i < ret.length; i++) {
					ret[i] = ret[i] + Math.random() * 0.0001;
				}
				return ret;
			};
			window.AudioBuffer.prototype.getChannelData.toString = origGetChannelData.toString.bind(origGetChannelData);
		})();
		(function () { // Canvas
			let origGetContext		= HTMLCanvasElement.prototype.getContext;
			let origGetImageData	= CanvasRenderingContext2D.prototype.getImageData;
			let origReadPixels1		= WebGLRenderingContext.prototype.readPixels;
			let origReadPixels2		= WebGL2RenderingContext.prototype.readPixels;
			let origToDataURL		= HTMLCanvasElement.prototype.toDataURL;
			let origToBlob			= HTMLCanvasElement.prototype.toBlob;
			let getImageData = function getImageData() {
				let imageData = origGetImageData.apply(this, arguments);
				for (let i = 0; i < imageData.data.length; i++) {
					imageData.data[i] += Math.round((Math.random() - 0.5) * 4.9);
				}
				return imageData;
			};
			CanvasRenderingContext2D.prototype.getImageData = getImageData;
			CanvasRenderingContext2D.prototype.getImageData.toString = origGetImageData.toString.bind(origGetImageData);
			let origIsPointInPath = CanvasRenderingContext2D.prototype.isPointInPath;
			CanvasRenderingContext2D.prototype.isPointInPath = function isPointInPath() {
				return false;
			};
			CanvasRenderingContext2D.prototype.isPointInPath.toString = origIsPointInPath.toString.bind(origIsPointInPath);
			let readPixels1 = function readPixels() {
				origReadPixels1.apply(this, arguments);
				let pixels = arguments[6];
				for (let i = 0; i < pixels.length; i++) {
					pixels[i] += Math.round((Math.random() - 0.5) * 4.9);
				}
			};
			WebGLRenderingContext.prototype.readPixels = readPixels1;
			WebGLRenderingContext.prototype.readPixels.toString = origReadPixels1.toString.bind(origReadPixels1);
			let readPixels2 = function readPixels() {
				origReadPixels2.apply(this, arguments);
				let pixels = arguments[6];
				for (let i = 0; i < pixels.length; i++) {
					pixels[i] += Math.round((Math.random() - 0.5) * 4.9);
				}
			};
			WebGL2RenderingContext.prototype.readPixels = readPixels2;
			WebGL2RenderingContext.prototype.readPixels.toString = origReadPixels2.toString.bind(origReadPixels2);
			let toDataURL = function toDataURL() {
				let context = origGetContext.apply(this, [""2d""]);
				let imageData = origGetImageData.apply(context, [0, 0, this.height, this.width]), origImageData = origGetImageData.apply(context, [0, 0, this.height, this.width]), ret;
				for (let i = 0; i < imageData.data.length; i++) {
					imageData.data[i] += Math.round((Math.random() - 0.5) * 4.9);
				}
				context.putImageData(imageData, 0, 0);
				ret = origToDataURL.apply(this, arguments);
				context.putImageData(origImageData, 0, 0);
				return ret;
			};
			let hookWebGLGetParameter = function (target) {
				let random = {
					""item"": function (e) {
						let rand = e.length * Math.random();
						return e[Math.floor(rand)];
					},
					""number"": function (power) {
						let tmp = [];
						for (let i = 0; i < power.length; i++) {
							tmp.push(Math.pow(2, power[i]));
						}
						return random.item(tmp);
					},
					""int"": function (power) {
						let tmp = [];
						for (let i = 0; i < power.length; i++) {
							let n = Math.pow(2, power[i]);
							tmp.push(new Int32Array([n, n]));
						}
						return random.item(tmp);
					},
					""float"": function (power) {
						let tmp = [];
						for (let i = 0; i < power.length; i++) {
							let n = Math.pow(2, power[i]);
							tmp.push(new Float32Array([1, n]));
						}
						return random.item(tmp);
					}
				};
				let origGetParameter = target.getParameter;
				target.getParameter = function (a1) {
					if (a1 === this.STENCIL_BITS							) { return 0;																						}
					if (a1 === this.DEPTH_BITS								) { return 24;																						}
					if (a1 === this.MAX_VARYING_VECTORS						) { return 30;																						}
					if (a1 === this.VENDOR									) { return ""WebKit"";																				}
					if (a1 === 37445										) { return ""Google Inc."";																			}
					if (a1 === this.RENDERER								) { return ""WebKit WebGL"";																			}
					if (a1 === this.MAX_TEXTURE_SIZE						) { return random.number([14, 15]);																	}
					if (a1 === this.MAX_VERTEX_UNIFORM_VECTORS				) { return random.number([12, 13]);																	}
					if (a1 === this.MAX_CUBE_MAP_TEXTURE_SIZE				) { return random.number([14, 15]);																	}
					if (a1 === this.MAX_RENDERBUFFER_SIZE					) { return random.number([14, 15]);																	}
					if (a1 === this.MAX_VIEWPORT_DIMS						) { return random.int([13, 14, 15]);																}
					if (a1 === this.ALPHA_BITS								) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.BLUE_BITS								) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.GREEN_BITS								) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.RED_BITS								) { return random.number([1, 2, 3, 4]);																}
					if (a1 === 34047										) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.MAX_TEXTURE_IMAGE_UNITS					) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.MAX_VERTEX_ATTRIBS						) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.MAX_VERTEX_TEXTURE_IMAGE_UNITS			) { return random.number([1, 2, 3, 4]);																}
					if (a1 === this.MAX_COMBINED_TEXTURE_IMAGE_UNITS		) { return random.number([4, 5, 6, 7, 8]);															}
					if (a1 === this.MAX_FRAGMENT_UNIFORM_VECTORS			) { return random.number([10, 11, 12, 13]);															}
					if (a1 === this.ALIASED_LINE_WIDTH_RANGE				) { return random.float([0, 10, 11, 12, 13]);														}
					if (a1 === this.ALIASED_POINT_SIZE_RANGE				) { return random.float([0, 10, 11, 12, 13]);														}
					if (a1 === 37446										) { return random.item([
					""ANGLE (Intel, Intel(R) UHD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D11-26.20.100.7263)"",
""ANGLE (Intel, Intel(R) UHD Graphics 615 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8681)"",
""ANGLE (NVIDIA GeForce GTX 1050 Ti Direct3D9Ex vs_3_0 ps_3_0)"",
""ANGLE (Intel(R) HD Graphics Direct3D11 vs_4_1 ps_4_1)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 730 Direct3D11 vs_5_0 ps_5_0, D3D11-23.21.13.8813)"",
""ANGLE (Intel, Intel(R) UHD Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9219)"",
""ANGLE (AMD, Radeon RX550/550 Series Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.14535.1000)"",
""ANGLE (Intel, Intel(R) UHD Graphics 620 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9316)"",
""ANGLE (Intel, Intel(R) HD Graphics Direct3D9Ex vs_3_0 ps_3_0, igdumd64.dll-8.15.10.3268)"",
""ANGLE (Intel, Intel(R) HD Graphics 5500 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.15.4248)"",
""ANGLE (NVIDIA GeForce 210  Direct3D11 vs_4_0 ps_4_0)"",
""ANGLE (AMD, Radeon RX 6700 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1100)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 3060 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.5678)"",
""ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9563)"",
""ANGLE (AMD, Radeon RX 580 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.13035.1000)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1660 Super Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.4614)"",
""ANGLE (AMD, Radeon (TM) RX 470 Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-26.20.13031.18002)"",
""ANGLE (Intel(R) Iris(TM) Pro Graphics 5200 Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2070 SUPER Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.5643)"",
""ANGLE (AMD, Radeon RX 580 Series Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.14534.2)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2070 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6611)"",
""ANGLE (Intel, Intel(R) HD Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.15.4248)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1050 Ti Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.4575)"",
""ANGLE (Intel, Intel(R) HD Graphics 3000 Direct3D11 vs_4_1 ps_4_1, D3D11-21.21.13.7654)"",
""ANGLE (AMD Radeon(TM) R5 Graphics Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (NVIDIA GeForce GTX 1060 5GB Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (AMD, Radeon RX550/550 Series Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21003.1028)"",
""ANGLE (Intel, Intel(R) UHD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D11-25.20.100.6618)"",
""ANGLE (Intel, Intel(R) UHD Graphics 600 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8681)"",
""ANGLE (Intel, Intel(R) HD Graphics 4000 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.10.4491)'"",
""ANGLE (Intel, Intel(R) HD Graphics 4400 Direct3D11 vs_5_0 ps_5_0, D3D11-20.19.15.4835)"",
""ANGLE (AMD, AMD Radeon(TM) RX Vega 10 Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.1028.1)"",
""ANGLE (AMD, AMD Radeon(TM) Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.1028.1)"",
""ANGLE (Intel, Intel(R) UHD Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8984)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 630 Direct3D9Ex vs_3_0 ps_3_0, nvd3dumx.dll-23.21.13.9135)"",
""ANGLE (AMD Radeon HD 6530D Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (Intel(R) HD Graphics 620 Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (Intel, Intel(R) HD Graphics 610 Direct3D11 vs_5_0 ps_5_0, D3D11-21.20.16.4508)"",
""ANGLE (AMD, AMD Radeon HD 5800 Series Direct3D11 vs_5_0 ps_5_0, D3D11-8.17.10.1433)"",
""ANGLE (AMD, AMD Radeon(TM) Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.11044.7)"",
""ANGLE (AMD, ATI Radeon HD 4200 Direct3D9Ex vs_3_0 ps_3_0, atiumd64.dll-8.14.10.678)"",
""ANGLE (Intel, Intel(R) UHD Graphics 610 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9466)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1060 6GB Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.3200)"",
""ANGLE (Intel, Intel(R) HD Graphics 620 Direct3D11 vs_5_0 ps_5_0, D3D11-21.20.16.4550)"",
""ANGLE (NVIDIA GeForce GTX 1060 Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 430 Direct3D11 vs_5_0 ps_5_0, D3D11-23.21.13.8813)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 3070 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6611)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2060 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6611)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2060 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6230)"",
""ANGLE (Intel, Intel(R) Iris(R) Xe Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9168)"",
""ANGLE (Intel, Intel(R) HD Graphics 4000 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.10.4252)"",
""ANGLE (AMD, AMD Radeon(TM) Vega 8 Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.11044.4003)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 230M     Direct3D11 vs_4_1 ps_4_1, D3D11-21.21.13.4201)"",
""ANGLE (Intel, Intel(R) HD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D11-23.20.16.4973)"",
""ANGLE (Intel, Intel(R) HD Graphics 3000 Direct3D11 vs_4_1 ps_4_1, D3D11-23.21.13.8934)"",
""ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)"",
""ANGLE (AMD, AMD Radeon(TM) Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-26.20.14044.3001)"",
""ANGLE (NVIDIA GeForce GTX 1070 Direct3D9Ex vs_3_0 ps_3_0)"",
""ANGLE (Intel, Intel(R) HD Graphics 4600 Direct3D11 vs_5_0 ps_5_0, D3D11-20.19.15.5166)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1660 Ti Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6627)"",
""ANGLE (Intel, Intel(R) HD Graphics 4000 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.10.3643)"",
""ANGLE (Intel, Intel(R) HD Graphics 4600 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.14.5057)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 750 Direct3D11 vs_5_0 ps_5_0, D3D11-10.18.13.5330)"",
""ANGLE (Intel, Intel(R) HD Graphics 4000 Direct3D9Ex vs_3_0 ps_3_0, igdumd64.dll-9.17.10.2849)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2070 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)"",
""ANGLE (AMD, Radeon RX 6800 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.22025.1003)"",
""ANGLE (Intel, Intel(R) Iris(R) Plus Graphics 640 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9189)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 970 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.3200)"",
""ANGLE (AMD, Radeon RX 5700 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.20045.1100)"",
""ANGLE (Intel, Intel(R) UHD Graphics 750 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9466)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 3080 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6100)"",
""ANGLE (AMD, Radeon RX 5600 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1000)"",
""ANGLE (Intel, Intel(R) Iris(R) Pro Graphics 580 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8682)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1060 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.4614)"",
""ANGLE (AMD, Radeon RX Vega 56 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.14535.1002)"",
""ANGLE (Intel, Intel(R) UHD Graphics 600 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9319)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 2060 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)"",
""ANGLE (AMD, Radeon RX 480 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.13035.1001)"",
""ANGLE (Intel, Intel(R) Iris(R) Graphics 6100 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8681)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1650 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.3200)"",
""ANGLE (Intel, Intel(R) UHD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9466)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 3090 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6100)"",
""ANGLE (AMD, Radeon RX Vega 64 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.14535.1003)"",
""ANGLE (Intel, Intel(R) Iris(R) Xe Max Graphics Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9563)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1080 Ti Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)"",
""ANGLE (AMD, Radeon RX 5500 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1100)"",
""ANGLE (Intel, Intel(R) HD Graphics 530 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8682)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1660 Ti Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.4614)"",
""ANGLE (AMD, Radeon RX 6600 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.22025.1003)"",
""ANGLE (Intel, Intel(R) Iris(R) Graphics 550 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9189)"",
""ANGLE (NVIDIA, NVIDIA GeForce RTX 3050 Ti Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6100)"",
""ANGLE (AMD, Radeon RX 6900 XT Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1000)"",
""ANGLE (Intel, Intel(R) UHD Graphics 617 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9319)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1070 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.3200)"",
""ANGLE (AMD, Radeon RX 560 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.13035.1001)"",
""ANGLE (Intel, Intel(R) Iris(R) Plus Graphics 655 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8681)"",
""ANGLE (Intel, Intel(R) HD Graphics 520 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9466)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 950 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)"",
""ANGLE (AMD, Radeon RX 550 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1100)"",
""ANGLE (Intel, Intel(R) HD Graphics 610 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.8682)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 1050 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.4614)"",
""ANGLE (AMD, Radeon RX 580 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.13035.1001)"",
""ANGLE (Intel, Intel(R) Iris(R) Plus Graphics 650 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9189)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 760 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.14.6100)"",
""ANGLE (AMD, Radeon RX 5600 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.21035.1000)"",
""ANGLE (Intel, Intel(R) UHD Graphics 605 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9319)"",
""ANGLE (NVIDIA, NVIDIA GeForce GTX 770 Direct3D11 vs_5_0 ps_5_0, D3D11-26.21.14.3200)"",
""ANGLE (AMD, Radeon R7 250 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.13035.1001)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 740 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)"",
""ANGLE (AMD, Radeon R9 290 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.22025.1003)"",
""ANGLE (Intel, Intel(R) HD Graphics 510 Direct3D11 vs_5_0 ps_5_0, D3D11-27.20.100.9466)"",
""ANGLE (NVIDIA, NVIDIA GeForce GT 1030 Direct3D11 vs_5_0 ps_5_0, D3D11-27.21.13.4200)""
					]);						}
			if (a1 === this.VERSION) { 
    return random.item([
        ""WebGL 1.0 (OpenGL Chromium)"",
        ""WebGL 1.0 (OpenGL ES 2.0 Chromium)"",
        ""WebGL 1.0 (OpenGL ES 2.0)"",
        ""WebGL 2.0 (OpenGL ES 3.0)"",
        ""WebGL 2.0 (OpenGL Chromium)""
    ]);
}
if (a1 === this.SHADING_LANGUAGE_VERSION) { 
    return random.item([
        ""WebGL GLSL"",
        ""WebGL GLSL ES"",
        ""WebGL GLSL ES 1.00"",
        ""WebGL GLSL ES 3.00"",
        ""WebGL GLSL (OpenGL Chromium)""
    ]);
}
					return origGetParameter.apply(this, arguments);
				};
				target.getParameter.toString = origGetParameter.toString.bind(origGetParameter);
			};
			hookWebGLGetParameter(WebGLRenderingContext.prototype);
			hookWebGLGetParameter(WebGL2RenderingContext.prototype);
			HTMLCanvasElement.prototype.toDataURL = toDataURL;
			HTMLCanvasElement.prototype.toDataURL.toString = origToDataURL.toString.bind(origToDataURL);
			let toBlob = function toBlob(callback, type, encoderOptions) {
				let context = origGetContext.apply(this, [""2d""]);
				let imageData = origGetImageData.apply(context, [0, 0, this.height, this.width]), imageDataOrig = origGetImageData.apply(context, [0, 0, this.height, this.width]);
				for (let i = 0; i < imageData.data.length; i++) {
					imageData.data[i] += Math.round((Math.random() - 0.5) * 4.9);
				}
				context.putImageData(imageData, 0, 0);
				return origToBlob.apply(this, [function (blob) {
					context.putImageData(imageDataOrig, 0, 0);
					callback(blob);
				}, type, encoderOptions]);
			};
			HTMLCanvasElement.prototype.toBlob = toBlob;
			HTMLCanvasElement.prototype.toBlob.toString = origToBlob.toString.bind(origToBlob);
		})();
	// 	(function () { // Intl
	// 		window.Intl = undefined;
	// 	})();
		(function () { // Fonts
			let offsetWidth = Object.getOwnPropertyDescriptor(HTMLElement.prototype, ""offsetWidth"");
			let origOffsetWidthGetter = offsetWidth.get;
			offsetWidth.get = function offsetWidth() {
				let ret = origOffsetWidthGetter.apply(this, arguments);
				if (ret != 0) {
					if (Math.random() >= 0.9) {
						ret += Math.floor((Math.random() >= 0.5 ? -1 : 1) * Math.random() + Math.random());
					}
				}
				return ret;
			};
			offsetWidth.get.toString = origOffsetWidthGetter.toString.bind(origOffsetWidthGetter);
			Object.defineProperty(HTMLElement.prototype, ""offsetWidth"", offsetWidth);
			let offsetHeight = Object.getOwnPropertyDescriptor(HTMLElement.prototype, ""offsetHeight"");
			let origOffsetHeightGetter = offsetHeight.get;
			offsetHeight.get = function offsetHeight() {
				let ret = origOffsetWidthGetter.apply(this, arguments);
				if (ret != 0) {
					if (Math.random() >= 0.9) {
						ret += Math.floor((Math.random() >= 0.5 ? -1 : 1) * Math.random() + Math.random());
					}
				}
				return ret;
			};
			offsetHeight.get.toString = origOffsetHeightGetter.toString.bind(origOffsetHeightGetter);
			Object.defineProperty(HTMLElement.prototype, ""offsetHeight"", offsetHeight);
		})();
		let debuggerHook = function (n, m) {
			try {
				let orig = window[n].prototype[m];
				let hook = function () {
					debug();
					try {
						return orig.apply(this, arguments);
					} catch (e) {}
				};
				Object.defineProperty(hook, ""name"", { value: orig.name, writable: false, enumerable: false, configurable: true });
				window[n].prototype[m] = hook;
				window[n].prototype[m].toString = orig.toString.bind(orig);
			} catch (e) {}
		};
		let debuggerHookAll = function (n) {
			try {
				for (let i in window[n].prototype) {
					try {
						if (window[n].prototype[i] instanceof Function) {
							debuggerHook(n, i);
						}
					} catch (e) {}
				}
			} catch (e) {}
		};
		debug(1);
		try {
			debuggerHookAll(""AudioContext"");
			debuggerHookAll(""BaseAudioContext"");
			debuggerHookAll(""OfflineAudioCompletionEvent"");
			debuggerHookAll(""OfflineAudioContext"");
			debuggerHookAll(""AudioBuffer"");
			debuggerHookAll(""AnalyserNode"");
			debuggerHookAll(""HTMLCanvasElement"");
			debuggerHookAll(""CanvasRenderingContext2D"");
			debuggerHookAll(""WebGLRenderingContext"");
			debuggerHookAll(""WebGL2RenderingContext"");
		} catch (e) {}
	}) + "")()"";
	document.documentElement.prepend(script);";

                using (StreamWriter sw = new StreamWriter(jsPath))
                {
                    sw.Write(jsCode);
                }
            }
            catch { }

        }
        private void dataGridView2_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == System.Windows.Forms.Keys.Delete)
                {
                    if (dataGridView2.SelectedCells.Count > 0)
                    {
                        int rowIndex = dataGridView2.SelectedCells[0].RowIndex;
                        if (rowIndex != -1) // 檢查 rowIndex 是否有效
                        {
                            var selectedRow = dataGridView2.Rows[rowIndex];
                            if (selectedRow.Cells["餅乾路徑"].Value != null) // 檢查 Value 是否為 null
                            {
                                string cookiePath = selectedRow.Cells["餅乾路徑"].Value.ToString();
                                bool canDeleteRow = true;

                                if (Directory.Exists(cookiePath))
                                {
                                    try
                                    {
                                        Directory.Delete(cookiePath, true);
                                    }
                                    catch (UnauthorizedAccessException)
                                    {
                                        MessageBox.Show("瀏覽器運行中無法刪除");
                                        canDeleteRow = false;
                                    }
                                }

                                if (canDeleteRow)
                                {
                                    dataGridView2.Rows.Remove(selectedRow);
                                }
                            }
                        }
                    }
                }
            }
            catch { }
        }
        public List<string> GenerateAllEmailCombinationsWithDots(string username, int maxDots = 1) //生成全部可行的gmail，然後從中挑一個使用
        {
            var combinations = new HashSet<string>();
            try
            {
                GenerateEmailCombinationsWithDots(username, maxDots, 0, 0, new StringBuilder(), combinations);
            }
            catch { }
            return combinations.ToList();
        }

        private void GenerateEmailCombinationsWithDots(string username, int maxDots, int dotsUsed, int startIndex, StringBuilder sb, HashSet<string> combinations)
        {
            try
            {
                if (startIndex == username.Length)
                {
                    if (dotsUsed <= maxDots)
                    {
                        combinations.Add(sb.ToString() + "@gmail.com");
                    }
                    return;
                }


                // Include the current character without a dot
                sb.Append(username[startIndex]);
                GenerateEmailCombinationsWithDots(username, maxDots, dotsUsed, startIndex + 1, sb, combinations);

                // Remove the current character to prepare for the next recursive call
                sb.Length--;

                // Include the current character with a dot, if possible
                if (dotsUsed < maxDots && startIndex < username.Length - 1)
                {
                    sb.Append(username[startIndex] + ".");
                    GenerateEmailCombinationsWithDots(username, maxDots, dotsUsed + 1, startIndex + 1, sb, combinations);
                    sb.Length -= 2; // Remove the current character and the dot for the next recursive call
                }
            }
            catch { }
        }
        private void button6_Click(object sender, EventArgs e)
        {
            string inputFile = "useragent總攬.txt"; // 輸入文件名稱
            string outputFile = "useragent總攬1.txt"; // 輸出文件名稱

            // 匹配手機useragent的正則表達式
            string mobilePattern = @"android|iphone|ipad|windows phone|blackberry|mobile";

            // 匹配舊版IE的正則表達式
            string oldIEPattern = @"MSIE [1-9]|10\.0";

            // 匹配特定UserAgent的正則表達式
            string specificPattern = @"Mozilla/5.0 \(Windows NT 10.0; Win64; x64; rv:109.0\) Gecko";

            // 匹配Windows XP的正則表達式
            string windowsXPPattern = @"Windows NT 5\.1|Windows XP";

            // 匹配舊版Chrome、Firefox、Safari、Edge的正則表達式
            string oldChromePattern = @"Chrome\/([0-9]{1,2}|[1-9][0-9]{1,2}|[1-9][0-9]|98[0-9]|99[0-9])\.";
            string oldFirefoxPattern = @"Firefox\/([0-9]|[1-9][0-9]|1[0-4][0-9]|105)\.";
            string oldSafariPattern = @"Version\/([0-9]|10)\.0 Safari|Version\/[4-7]\.";
            string oldEdgePattern = @"Edge\/(1[0-3]|[0-9])\.";

            // 新增過濾規則
            string oldOperaPattern = @"Opera\/([0-8]|9\.([0-8][0-9]|9[0-2]))";
            string oldIE11Pattern = @"Trident\/7\.0;.*rv:11\.0";
            string tridentBelow7Pattern = @"Trident\/([0-6]|7\.0)";
            string oldMacOSPattern = @"Mac OS X 9|Mac OS X 10_[0-5]|Mac OS X 10_6|Mac OS X 10_9|Mac OS X 11_10";
            string oldWindowsNTPattern = @"Windows NT 4\.0|Windows NT 6\.0|Windows NT 6\.1|Windows NT 7_1";
            string oldSunOSPattern = @"SunOS5\.10";
            string nonMainstreamBrowserPattern = @"AppleCoreMedia|Goanna|PaleMoon";

            string oldSafari3Pattern = @"Version\/3\.0\.4 Safari";
            string sqlInjectionPattern = @"SELECT BENCHMARK\(\d+,MD5\(0x\d+\)\)#";

            string sonyEricssonPattern = @"SonyEricssonX1a\/R3AA Rogers\/Opera\/9\.5";
            string tizen2Pattern = @"Linux; Tizen 2\.3";
            string androidPattern = @"android";

            using (StreamReader sr = new StreamReader(inputFile))
            {
                using (StreamWriter sw = new StreamWriter(outputFile))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (!Regex.IsMatch(line, mobilePattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldIEPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, specificPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, windowsXPPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldChromePattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldFirefoxPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldSafariPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldEdgePattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldOperaPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldIE11Pattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, tridentBelow7Pattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldMacOSPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldWindowsNTPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldSunOSPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, nonMainstreamBrowserPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, oldSafari3Pattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, sqlInjectionPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, sonyEricssonPattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, tizen2Pattern, RegexOptions.IgnoreCase) &&
              !Regex.IsMatch(line, androidPattern, RegexOptions.IgnoreCase)) // 新增的規則
                        {
                            // 如果不匹配任何上述條件，寫入新文件
                            sw.WriteLine(line);
                        }

                    }
                }
            }
        }



        private void button4_Click(object sender, EventArgs e)
        {
            using (StreamWriter file = new StreamWriter("useragenttest.txt"))
            {
                while (true)
                {
                    try
                    {
                        string uniqueUserAgent = GenerateUniqueUserAgent();
                        file.WriteLine(uniqueUserAgent);
                        file.Flush(); // 確保將內容寫入檔
                    }
                    catch
                    {
                        // 生成User-Agent失敗，退出迴圈
                        break;
                    }
                }
            }
        }


        private static readonly Random random = new Random();
        private static readonly HashSet<string> generatedUserAgents = new HashSet<string>();

        public static string GenerateUniqueUserAgent()
        {
            string userAgent;
            do
            {
                userAgent = GenerateUserAgent();
            } while (generatedUserAgents.Contains(userAgent));

            generatedUserAgents.Add(userAgent);
            return userAgent;
        }

        private static string GenerateUserAgent()
        {
            int ntMajorVersion = 10 + random.Next(4); // Windows NT 11.0 - 13.0
            double ntMinorVersion = Math.Round(random.NextDouble(), 1);
            int chromeVersion = 110 + random.Next(3); // Chrome/110 - Chrome/112
            int buildVersion = random.Next(10);
            int buildSubVersion1 = random.Next(10);
            int buildSubVersion2 = random.Next(10);

            return $"Mozilla/5.0 (Windows NT {ntMajorVersion}.{ntMinorVersion}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{chromeVersion}.{buildVersion}.{buildSubVersion1}.{buildSubVersion2} Safari/537.36";
        }

        private static HashSet<string> GenerateUniquePhoneNumbers(string phoneNumber, int delta)
        {
            int originalLastFourDigits = int.Parse(phoneNumber.Substring(6, 4));
            int minLastFourDigits = Math.Max(0, originalLastFourDigits - delta);
            int maxLastFourDigits = Math.Min(9999, originalLastFourDigits + delta);
            string prefix = phoneNumber.Substring(0, 6);

            HashSet<string> generatedPhoneNumbers = new HashSet<string>();

            for (int i = minLastFourDigits; i <= maxLastFourDigits; i++)
            {
                if (i == originalLastFourDigits) continue;

                string newPhoneNumber = prefix + i.ToString("D4");
                if (newPhoneNumber.Length > 10)
                {
                    int carry = (i - 9999) / 10000;
                    int newPrefix = int.Parse(prefix) + carry;
                    newPhoneNumber = newPrefix.ToString("D6") + (i % 10000).ToString("D4");
                }
                generatedPhoneNumbers.Add(newPhoneNumber);
            }

            return generatedPhoneNumbers;
        }
        private void button5_Click(object sender, EventArgs e)
        {
            string inputFilePath = "中華電信.台灣大哥大.遠傳Taiwan台灣空號門號大全完整版沒刪除行數的.txt";
            string outputFilePath = "中華電信.台灣大哥大.遠傳Taiwan台灣空號門號大全number生成的號碼完整版300多萬個.txt";
            int delta = 500;

            var originalPhoneNumbers = File.ReadAllLines(inputFilePath);
            var generatedPhoneNumbers = new HashSet<string>();

            foreach (string phoneNumber in originalPhoneNumbers)
            {
                generatedPhoneNumbers.UnionWith(GenerateUniquePhoneNumbers(phoneNumber, delta));
            }

            // 將號碼隨機排序
            var shuffledPhoneNumbers = generatedPhoneNumbers.OrderBy(_ => Guid.NewGuid()).ToList();

            File.WriteAllLines(outputFilePath, shuffledPhoneNumbers);
        }

        private void 改成後台運行_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void HighlightAndMoveRows(string searchText)
        {
            if (string.IsNullOrEmpty(searchText))
            {
                return;
            }

            List<DataGridViewRow> rowsToMove = new List<DataGridViewRow>();
            dataGridView2.ClearSelection();

            foreach (DataGridViewRow row in dataGridView2.Rows)
            {
                if (!row.IsNewRow)
                {
                    bool matchFound = false;
                    foreach (DataGridViewCell cell in row.Cells)
                    {
                        cell.Style.BackColor = Color.Empty; // 清除先前的高亮显示

                        if (cell.Value != null && cell.Value.ToString().Contains(searchText))
                        {
                            matchFound = true;
                            cell.Style.BackColor = Color.Yellow;
                        }
                    }

                    if (matchFound)
                    {
                        rowsToMove.Add(row);
                    }
                }
            }

            dataGridView2.SuspendLayout();

            for (int i = rowsToMove.Count - 1; i >= 0; i--)
            {
                DataGridViewRow row = rowsToMove[i];
                dataGridView2.Rows.Remove(row);
                dataGridView2.Rows.Insert(0, row);
            }

            dataGridView2.ResumeLayout();
        }
        private void 搜尋DatagridviewCombobox_TextChanged(object sender, EventArgs e)
        {
            string searchText = 搜尋DatagridviewCombobox.Text;
            HighlightAndMoveRows(searchText);
        }
        private async void button7_Click(object sender, EventArgs e)
        {
            //var browserFetcher = new BrowserFetcher(new BrowserFetcherOptions { Path = "Chromium" });
            //await browserFetcher.DownloadAsync("1139078"); // 可自行更改修訂版本號碼
            //string executablePath = browserFetcher.GetExecutablePath("1139078");

            //int browserInstances = 8;
            //List<IBrowser> browsers = new List<IBrowser>();

            //for (int i = 0; i < browserInstances; i++)
            //{
            //    var browser = await Puppeteer.LaunchAsync(new LaunchOptions
            //    {
            //        Headless = false, // 設為 false 以顯示瀏覽器視窗
            //        ExecutablePath = executablePath
            //    });
            //    browsers.Add(browser);
            //}

            //// 在此處撰寫您的代碼

            //// 等待操作完成，此處可以自行調整等待時間
            //await Task.Delay(TimeSpan.FromSeconds(30));

            // 現在，瀏覽器將保持打開狀態，直到您手動關閉它
        }

        private void button9_Click(object sender, EventArgs e)
        {
            string inputFile = "useragent總攬1.txt"; // 輸入文件名稱
            string outputFile = "useragent篩選電腦系統.txt"; // 輸出文件名稱

            // 匹配括號內的操作系統的正則表達式
            string osPattern = @"\(([^)]+)\)";

            var uniqueOS = new List<string>();

            using (StreamReader sr = new StreamReader(inputFile))
            {
                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    Match osMatch = Regex.Match(line, osPattern, RegexOptions.IgnoreCase);
                    if (osMatch.Success)
                    {
                        string os = osMatch.Groups[1].Value;
                        if (os.Contains("Windows") || os.Contains("Macintosh") || os.Contains("X11") || os.Contains("Linux"))
                        {
                            if (!uniqueOS.Any(x => IsSimilar(x, os)))
                            {
                                uniqueOS.Add(os);
                            }
                        }
                    }
                }
            }

            using (StreamWriter sw = new StreamWriter(outputFile))
            {
                foreach (string os in uniqueOS)
                {
                    sw.WriteLine(os);
                }
            }
        }

        // Jaro-Winkler similarity algorithm
        private bool IsSimilar(string s1, string s2)
        {
            double similarityThreshold = 0.85;
            return JaroWinklerDistance.Proximity(s1, s2) >= similarityThreshold;
        }

        public class JaroWinklerDistance
        {
            private const double PrefixAdjustmentScale = 0.1;

            public static double Proximity(string string1, string string2)
            {
                double jaroDistance = JaroDistance(string1, string2);
                double commonPrefixLength = CommonPrefixLength(string1, string2);

                return jaroDistance + (commonPrefixLength * PrefixAdjustmentScale * (1 - jaroDistance));
            }

            private static double JaroDistance(string string1, string string2)
            {
                string longer, shorter;

                if (string1.Length > string2.Length)
                {
                    longer = string1;
                    shorter = string2;
                }
                else
                {
                    longer = string2;
                    shorter = string1;
                }

                int matchDistance = Math.Max(longer.Length / 2 - 1, 0);
                bool[] matchFlags1 = new bool[shorter.Length];
                bool[] matchFlags2 = new bool[longer.Length];

                int matches = 0;
                for (int i = 0; i < shorter.Length; i++)
                {
                    int start = Math.Max(i - matchDistance, 0);
                    int end = Math.Min(i + matchDistance + 1, longer.Length);

                    for (int j = start; j < end; j++)
                    {
                        if (matchFlags2[j])
                        {
                            continue;
                        }

                        if (shorter[i] != longer[j])
                        {
                            continue;
                        }

                        matchFlags1[i] = true;
                        matchFlags2[j] = true;

                        matches++;
                        break;
                    }
                }

                if (matches == 0)
                {
                    return 0;
                }

                double t = 0.0;
                int k = 0;

                for (int i = 0; i < shorter.Length; i++)
                {
                    if (!matchFlags1[i])
                    {
                        continue;
                    }

                    while (!matchFlags2[k])
                    {
                        k++;
                    }

                    if (shorter[i] != longer[k])
                    {
                        t += 0.5;
                    }

                    k++;
                }

                double m = matches;

                return ((m / shorter.Length) + (m / longer.Length) + ((m - t) / m)) / 3;
            }

            private static double CommonPrefixLength(string string1, string string2)
            {
                int n = Math.Min(Math.Min(string1.Length, string2.Length), 4);
                for (int i = 0; i < n; i++)
                {
                    if (string1[i] != string2[i])
                    {
                        return i;
                    }
                }

                return n;
            }
        }

    }
}
